
2/21/23: ROMH emulation including VIC direct access
Yel  CH1- Debug (inside the ISR)
Blu  CH2- Phi2 (clock)
Purp CH3- DataCE* (Data Buffer output enable = low) (dir set by R/!W)
Grn  CH4- !ROMH (E000 cart dec)
Red Math- ch1+ch2   (0 highlights ISR trig time)


tek0009:  idle: 80nS P2 fall to debug sig
tek0011:  Jup Lander 60nS debug to P2 fall
tek0013:  same, infinite persistence
tek0014:  VIC+Regular read
tek0015:  Zoom out

Paramters used:
// Times starting from Phi2 falling (interrupt):
#define nS_VICStart        200    //delay from Phi2 falling to look for ROMH.  Too long or short will manifest as general screen noise (missing data) on ROMH games such as JupiterLander and RadarRatRace
//  Hold time for VIC cycle is same as nS_DataHold

// These times starting from Phi2 rising:
#define nS_RWnReady        130    //Phi2 rise to RWn valid, takes ~30nS past Phi2 to go low for write
#define nS_PLAprop         225    //delay through PLA to decode address (IO1/2, ROML/H), have measured >100nS from Phi2 to IO1 (delayed through PLA, etc)
#define nS_DataSetup       300    //On a write, when to latch data bus. spec calls for 150-200nS min to Data valid for write opperation (TMDS)
#define nS_DataHold        350    //On a read, when to stop driving the data bus, applies to both VIC and normal cycles



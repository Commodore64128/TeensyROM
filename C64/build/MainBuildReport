
; ******** Source: source\MainMenu_C000.asm
     1                          ; MIT License
     2                          ; 
     3                          ; Copyright (c) 2023 Travis Smith
     4                          ; 
     5                          ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software 
     6                          ; and associated documentation files (the "Software"), to deal in the Software without 
     7                          ; restriction, including without limitation the rights to use, copy, modify, merge, publish, 
     8                          ; distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom 
     9                          ; the Software is furnished to do so, subject to the following conditions:
    10                          ; 
    11                          ; The above copyright notice and this permission notice shall be included in all copies or 
    12                          ; substantial portions of the Software.
    13                          ; 
    14                          ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING 
    15                          ; BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
    16                          ; NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
    17                          ; DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
    18                          ; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    19                          
    20                          
    21                          ; ********************************   Symbols   ********************************   
    22                             !convtab pet   ;key in and text out conv to PetSCII throughout
    23                          
    24                             ;Zero page RAM Registers:
    25                             PtrAddrLo   = $fb
    26                             PtrAddrHi   = $fc
    27                             Ptr2AddrLo  = $fd
    28                             Ptr2AddrHi  = $fe
    29                             ;other RAM Registers/code space
    30                             RegMenuPageStart = $0334 ;$0334-033b is "free space"
    31                             SIDVoicCont      = $0335
    32                             SIDAttDec        = $0336
    33                             SIDSusRel        = $0337
    34                             SIDDutyHi        = $0338
    35                             PRGLoadStartReloc= $033c ;$033c-03fb is the tape buffer (192 bytes)
    36                             
    37                             ;RAM coppies:
    38                             MainCodeRAM = $c000    ;this file
    39                             SIDCodeRAM = $1000 
    40                          
    41                             ScreenMemStart    = $0400
    42                             BorderColorReg    = $d020 
    43                             BackgndColorReg   = $d021
    44                             SIDLoc            = $d400
    45                             IO1Port           = $de00
    46                             TODHoursBCD       = $dc0b
    47                             TODMinBCD         = $dc0a
    48                             TODSecBCD         = $dc09
    49                             TODTenthSecBCD    = $dc08
    50                             
    51                             ;!!!!!These need to match Teensy Code: Menu_Regs.h !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    52                             MaxItemNameLength = 28
    53                             
    54                             rRegStatus        =  0 ;//Busy when doing SD/USB access.  note: loc 0(DE00) gets written to at reset
    55                             rRegStrAddrLo     =  1 ;//lo byte of start address of the prg file being transfered to mem
    56                             rRegStrAddrHi     =  2 ;//Hi byte of start address
    57                             rRegStrAvailable  =  3 ;//zero when inactive/complete 
    58                             rRegStreamData    =  4 ;//next byte of data to transfer, auto increments when read
    59                             wRegControl       =  5 ;//RegCtlCommands: execute specific functions
    60                             rRegPresence1     =  6 ;//for HW detect: 0x55
    61                             rRegPresence2     =  7 ;//for HW detect: 0xAA
    62                             rRegLastHourBCD   =  8 ;//Last TOD Hours read
    63                             rRegLastMinBCD    =  9 ;//Last TOD Minutes read
    64                             rRegLastSecBCD    = 10 ;//Last TOD Seconds read
    65                             rWRegCurrMenuWAIT = 11 ;//RegMenuTypes: select Menu type: SD, USB, etc
    66                             rwRegSelItem      = 12 ;//select Menu Item for name, type, execution, etc
    67                             rRegNumItems      = 13 ;//num items in menu list
    68                             rRegItemType      = 14 ;//regItemTypes: type of item 
    69                             rRegItemNameStart = 15 ;//MaxItemNameLength bytes long (incl term)
    70                             rRegItemNameTerm  = rRegItemNameStart + MaxItemNameLength
    71                             StartSIDRegs      = rRegItemNameTerm+1  ;//start of SID Regs, matching SID Reg order ($D400)
    72                             rRegSIDFreqLo1    = StartSIDRegs +  0 
    73                             rRegSIDFreqHi1    = StartSIDRegs +  1
    74                             rRegSIDDutyLo1    = StartSIDRegs +  2
    75                             rRegSIDDutyHi1    = StartSIDRegs +  3
    76                             rRegSIDVoicCont1  = StartSIDRegs +  4
    77                             rRegSIDAttDec1    = StartSIDRegs +  5
    78                             rRegSIDSusRel1    = StartSIDRegs +  6
    79                          
    80                             rRegSIDFreqLo2    = StartSIDRegs +  7
    81                             rRegSIDFreqHi2    = StartSIDRegs +  8
    82                             rRegSIDDutyLo2    = StartSIDRegs +  9
    83                             rRegSIDDutyHi2    = StartSIDRegs + 10
    84                             rRegSIDVoicCont2  = StartSIDRegs + 11
    85                             rRegSIDAttDec2    = StartSIDRegs + 12
    86                             rRegSIDSusRel2    = StartSIDRegs + 13
    87                          
    88                             rRegSIDFreqLo3    = StartSIDRegs + 14
    89                             rRegSIDFreqHi3    = StartSIDRegs + 15
    90                             rRegSIDDutyLo3    = StartSIDRegs + 16
    91                             rRegSIDDutyHi3    = StartSIDRegs + 17
    92                             rRegSIDVoicCont3  = StartSIDRegs + 18
    93                             rRegSIDAttDec3    = StartSIDRegs + 19
    94                             rRegSIDSusRel3    = StartSIDRegs + 20
    95                          
    96                             rRegSIDFreqCutLo  = StartSIDRegs + 21
    97                             rRegSIDFreqCutHi  = StartSIDRegs + 22
    98                             rRegSIDFCtlReson  = StartSIDRegs + 23
    99                             rRegSIDVolFltSel  = StartSIDRegs + 24
   100                             EndSIDRegs        = StartSIDRegs + 25
   101                          
   102                             rRegSIDStrStart   = StartSIDRegs + 26
   103                             ;  9: 3 chars per voice (oct, note, shrp)
   104                             ;  1: Out of voices indicator
   105                             ;  3: spaces betw
   106                             ; 14 total w// term:  ON# ON# ON# X
   107                             rRegSIDOutOfVoices= StartSIDRegs + 38
   108                             rRegSIDStringTerm = StartSIDRegs + 39
   109                              
   110                          
   111                             rsReady      = 0x5a
   112                             rsChangeMenu = 0x9d
   113                             rsStartItem  = 0xb1
   114                             rsGetTime    = 0xe6
   115                             ;rsError      = 0x24
   116                          
   117                             rmtSD        = 0
   118                             rmtTeensy    = 1
   119                             rmtUSBHost   = 2
   120                             rmtUSBDrive  = 3
   121                             
   122                             rCtlVanish           = 0
   123                             rCtlVanishReset      = 1
   124                             rCtlStartSelItemWAIT = 2
   125                             rCtlGetTimeWAIT      = 3
   126                          
   127                             rtNone = 0  ;synch with TblItemType below
   128                             rt16k  = 1
   129                             rt8kHi = 2
   130                             rt8kLo = 3
   131                             rtPrg  = 4
   132                             rtUnk  = 5
   133                             rtCrt  = 6
   134                             rtDir  = 7
   135                             
   136                          ;!!!!!!!!!!!!!!!!  End Teensy matching  !!!!!!!!!!!!!!!!!!
   137                          
   138                          
   139                             ;Kernal routines:
   140                             IRQDefault = $ea31
   141                             SendChar   = $ffd2
   142                             ScanKey    = $ff9f ;SCNKEY
   143                             GetIn      = $ffe4 ;GETIN
   144                             SetCursor  = $fff0 ;PLOT
   145                             
   146                             ;BASIC routines:
   147                             BasicColdStartVect = $a000 ; $e394  58260
   148                             BasicWarmStartVect = $a002 ; $e37b  58235
   149                             PrintString =  $ab1e
   150                          
   151                             ;chr$ symbols
   152                             ChrBlack   = 144
   153                             ChrWhite   = 5
   154                             ChrRed     = 28
   155                             ChrCyan    = 159
   156                             ChrPurple  = 156
   157                             ChrGreen   = 30
   158                             ChrBlue    = 31
   159                             ChrYellow  = 158 
   160                             ChrOrange  = 129
   161                             ChrBrown   = 149
   162                             ChrLtRed   = 150
   163                             ChrDrkGrey = 151
   164                             ChrMedGrey = 152
   165                             ChrLtGreen = 153
   166                             ChrLtBlue  = 154
   167                             ChrLtGrey  = 155
   168                             
   169                             ChrF1      = 133
   170                             ChrF2      = 137
   171                             ChrF3      = 134
   172                             ChrF4      = 138
   173                             ChrF5      = 135
   174                             ChrF6      = 139
   175                             ChrF7      = 136
   176                             ChrF8      = 140
   177                             ChrToLower = 14
   178                             ChrToUpper = 142
   179                             ChrRvsOn   = 18
   180                             ChrRvsOff  = 146
   181                             ChrClear   = 147
   182                             ChrReturn  = 13
   183                             ChrSpace   = 32
   184                             ChrCSRSUp  = 145
   185                             ChrCSRSDn  = 17
   186                             
   187                          ;poke colors
   188                             pokeBlack   = 0
   189                             pokeWhite   = 1
   190                             pokeRed     = 2
   191                             pokeCyan    = 3
   192                             pokePurple  = 4
   193                             pokeGreen   = 5
   194                             pokeBlue    = 6
   195                             pokeYellow  = 7
   196                             pokeOrange  = 8
   197                             pokeBrown   = 9
   198                             pokeLtRed   = 10
   199                             pokeDrkGrey = 11
   200                             pokeMedGrey = 12
   201                             pokeLtGreen = 13
   202                             pokeLtBlue  = 14
   203                             pokeLtGrey  = 15
   204                             
   205                             ;color scheme:
   206                             BorderColor      = pokePurple
   207                             BackgndColor     = pokeBlack
   208                             TimeColor        = ChrOrange
   209                             MenuMiscColor    = ChrGreen
   210                             ROMNumColor      = ChrDrkGrey
   211                             OptionColor      = ChrYellow
   212                             SourcesColor     = ChrLtBlue
   213                             TypeColor        = ChrBlue
   214                             NameColor        = ChrLtGreen
   215                             MaxMenuDispItems = 16
   216                             M2SDataColumn    = 14
   217                          
   218                          ;******************************* Main Code Start ************************************   
   219                          
   220                          * = MainCodeRAM
   221                          Start:
   222                          
   223                          ;screen setup:     
   224  c000 a904                  lda #BorderColor
   225  c002 8d20d0                sta BorderColorReg
   226  c005 a900                  lda #BackgndColor
   227  c007 8d21d0                sta BackgndColorReg
   228                             
   229  c00a a900                  lda #$00
   230  c00c 200010                jsr SIDCodeRAM ;Initialize music
   231  c00f 20acc5                jsr SIDMusicOn ;Start the music!
   232                             
   233                          ;check for HW:
   234  c012 ad06de                lda rRegPresence1+IO1Port
   235  c015 c955                  cmp #$55
   236  c017 d007                  bne NoHW
   237  c019 ad07de                lda rRegPresence2+IO1Port
   238  c01c c9aa                  cmp #$AA
   239  c01e f00a                  beq +
   240                          NoHW:
   241  c020 a949                  lda #<MsgNoHW
   242  c022 a0c7                  ldy #>MsgNoHW
   243  c024 201eab                jsr PrintString  
   244  c027 4c27c0             -  jmp -
   245                          
   246  c02a a900               +  lda #rCtlVanish ;Deassert Game & ExROM
   247  c02c 8d05de                sta wRegControl+IO1Port
   248                          
   249  c02f 20f7c0                jsr ListMenuItemsInit
   250                             ;jsr SynchEthernetTime
   251                          
   252                          WaitForKey:     
   253  c032 20b9c2                jsr DisplayTime
   254  c035 20e4ff                jsr GetIn    
   255  c038 f0f8                  beq WaitForKey
   256                          
   257  c03a c941                  cmp #'a'  
   258  c03c 3019                  bmi +   ;skip if below 'a'
   259  c03e c952                  cmp #'a'+ MaxMenuDispItems + 1  
   260  c040 1015                  bpl +   ;skip if above MaxMenuDispItems
   261                             ;convert to ROM number
   262  c042 38                    sec       ;set to subtract without carry
   263  c043 e941                  sbc #'a'  ;now 0-?
   264  c045 18                    clc
   265  c046 6d3403                adc RegMenuPageStart   
   266                             ;ROMSelected, ROM num in acc
   267  c049 cd0dde                cmp rRegNumItems+IO1Port 
   268  c04c 10e4                  bpl WaitForKey   ;skip if above num of ROMs
   269  c04e 8d0cde                sta rwRegSelItem+IO1Port ;select Item from list
   270  c051 20c3c1                jsr SelectMenuItem
   271  c054 4c32c0                jmp WaitForKey
   272                          
   273  c057 c911               +  cmp #ChrCSRSDn  ;Next Page
   274  c059 d014                  bne +
   275  c05b ad3403                lda RegMenuPageStart
   276  c05e 18                    clc
   277  c05f 6910                  adc #MaxMenuDispItems
   278  c061 cd0dde                cmp rRegNumItems+IO1Port
   279  c064 10cc                  bpl WaitForKey  ;already on last page
   280  c066 8d3403                sta RegMenuPageStart
   281  c069 20fcc0                jsr ListMenuItems
   282  c06c 4c32c0                jmp WaitForKey
   283                          
   284  c06f c991               +  cmp #ChrCSRSUp  ;Prev Page
   285  c071 d011                  bne +
   286  c073 ad3403                lda RegMenuPageStart
   287                             ;cmp #0     
   288  c076 f0ba                  beq WaitForKey  ;already on first page
   289  c078 38                    sec
   290  c079 e910                  sbc #MaxMenuDispItems
   291  c07b 8d3403                sta RegMenuPageStart
   292  c07e 20fcc0                jsr ListMenuItems
   293  c081 4c32c0                jmp WaitForKey  
   294                          
   295  c084 c985               +  cmp #ChrF1  ;Teensy mem Menu
   296  c086 d008                  bne +
   297  c088 a901                  lda #rmtTeensy
   298  c08a 20f1c0                jsr ListMenuItemsChangeInit
   299  c08d 4c32c0                jmp WaitForKey  
   300                          
   301  c090 c989               +  cmp #ChrF2  ;Exit to BASIC
   302  c092 d008                  bne +
   303  c094 a901                  lda #rCtlVanishReset ;reset to BASIC
   304  c096 8d05de                sta wRegControl+IO1Port
   305  c099 4c99c0             -  jmp -  ;should be resetting to BASIC
   306                          
   307  c09c c986               +  cmp #ChrF3  ;SD Card Menu
   308  c09e d008                  bne +
   309  c0a0 a900                  lda #rmtSD
   310  c0a2 20f1c0                jsr ListMenuItemsChangeInit
   311  c0a5 4c32c0                jmp WaitForKey  
   312                          
   313  c0a8 c98a               +  cmp #ChrF4  ;toggle music
   314  c0aa d013                  bne +
   315  c0ac a2c6                  ldx #>irqRastSID
   316  c0ae ec1503                cpx $315  ;see if the IRQ is pointing at our SID routine
   317  c0b1 f006                  beq on
   318  c0b3 20acc5                jsr SIDMusicOn ;sid is off, turn it on
   319  c0b6 4c32c0                jmp WaitForKey
   320  c0b9 20d6c5             on jsr SIDMusicOff ;sid is on, turn it off
   321  c0bc 4c32c0                jmp WaitForKey  
   322                          
   323  c0bf c987               +  cmp #ChrF5  ;USB Drive Menu
   324  c0c1 d008                  bne +
   325  c0c3 a903                  lda #rmtUSBDrive
   326  c0c5 20f1c0                jsr ListMenuItemsChangeInit
   327  c0c8 4c32c0                jmp WaitForKey  
   328                          
   329  c0cb c98b               +  cmp #ChrF6  ;Synch Ethernet Time
   330  c0cd d006                  bne +
   331  c0cf 2099c2                jsr SynchEthernetTime
   332  c0d2 4c32c0                jmp WaitForKey  
   333                          
   334  c0d5 c988               +  cmp #ChrF7  ;Exe USB Host file
   335  c0d7 d008                  bne +
   336  c0d9 a902                  lda #rmtUSBHost
   337  c0db 20f1c0                jsr ListMenuItemsChangeInit
   338  c0de 4c32c0                jmp WaitForKey
   339                          
   340  c0e1 c98c               +  cmp #ChrF8  ;MIDI to SID
   341  c0e3 d009                  bne +
   342  c0e5 205dc3                jsr MIDI2SID
   343  c0e8 20fcc0                jsr ListMenuItems
   344  c0eb 4c32c0                jmp WaitForKey
   345                          
   346                          
   347                          
   348  c0ee 4c32c0             +  jmp WaitForKey
   349                          
   350                             
   351                          ; ******************************* Subroutines ******************************* 
   352                          ;                           list out rom number, type, & names
   353                          
   354                          Sssssssssssssssssssssssubroutines:
   355                          ListMenuItemsChangeInit:  ;Prep: Load acc with menu to change to
   356  c0f1 8d0bde                sta rWRegCurrMenuWAIT+IO1Port  ;must wait on a write (load dir)
   357  c0f4 2070c2                jsr WaitForTR
   358                          ListMenuItemsInit:
   359  c0f7 a900                  lda #0       ;initialize to first Item
   360  c0f9 8d3403                sta RegMenuPageStart
   361                          ListMenuItems:  ;Prep: load RegMenuPageStart with first ROM on menu page
   362  c0fc a93a                  lda #<MsgBanner
   363  c0fe a0c6                  ldy #>MsgBanner
   364  c100 201eab                jsr PrintString 
   365  c103 a968                  lda #<MsgFrom
   366  c105 a0c6                  ldy #>MsgFrom
   367  c107 201eab                jsr PrintString 
   368                             ;print menu source:
   369  c10a ad0bde                lda rWRegCurrMenuWAIT+IO1Port ;don't have to wait on a read
   370  c10d c900                  cmp #rmtSD
   371  c10f d007                  bne +
   372  c111 a985                  lda #<MsgMenuSD
   373  c113 a0c7                  ldy #>MsgMenuSD
   374  c115 4c32c1                jmp cont1
   375                          
   376  c118 c901               +  cmp #rmtTeensy
   377  c11a d007                  bne +
   378  c11c a98e                  lda #<MsgMenuTeensy
   379  c11e a0c7                  ldy #>MsgMenuTeensy
   380  c120 4c32c1                jmp cont1
   381                             
   382  c123 c903               +  cmp #rmtUSBDrive
   383  c125 d007                  bne +
   384  c127 a9a4                  lda #<MsgMenuUSBDrive
   385  c129 a0c7                  ldy #>MsgMenuUSBDrive
   386  c12b 4c32c1                jmp cont1
   387                             
   388                          +  ;cmp #rmtUSBHost
   389                             ;bne +
   390  c12e a99a                  lda #<MsgMenuUSBHost
   391  c130 a0c7                  ldy #>MsgMenuUSBHost
   392                             ;jmp cont1
   393                             
   394                          cont1   
   395  c132 201eab                jsr PrintString
   396  c135 ad0dde                lda rRegNumItems+IO1Port
   397  c138 d00a                  bne +
   398  c13a a971                  lda #<MsgNoItems
   399  c13c a0c7                  ldy #>MsgNoItems
   400  c13e 201eab                jsr PrintString
   401  c141 4cb3c1                jmp finishMenu
   402  c144 ad3403             +  lda RegMenuPageStart
   403  c147 8d0cde                sta rwRegSelItem+IO1Port
   404  c14a a9c1                  lda #'A' ;initialize to start of page
   405                          nextLine
   406  c14c 48                    pha ;remember menu letter
   407  c14d a90d                  lda #ChrReturn
   408  c14f 20d2ff                jsr SendChar
   409                             
   410                          ;print option letter
   411  c152 a99e                  lda #OptionColor
   412  c154 20d2ff                jsr SendChar
   413  c157 a920                  lda #ChrSpace
   414  c159 20d2ff                jsr SendChar
   415  c15c a912                  lda #ChrRvsOn
   416  c15e 20d2ff                jsr SendChar
   417  c161 68                    pla
   418  c162 48                    pha
   419  c163 20d2ff                jsr SendChar
   420  c166 a992                  lda #ChrRvsOff
   421  c168 20d2ff                jsr SendChar
   422  c16b a92d                  lda #'-'
   423  c16d 20d2ff                jsr SendChar
   424                          ; print name
   425  c170 a999                  lda #NameColor
   426  c172 20d2ff                jsr SendChar
   427  c175 a90f                  lda #<rRegItemNameStart+IO1Port
   428  c177 a0de                  ldy #>rRegItemNameStart+IO1Port
   429  c179 201eab                jsr PrintString
   430                          ;align to col
   431  c17c 38                    sec
   432  c17d 20f0ff                jsr SetCursor ;read current to load y (row)
   433  c180 a01f                  ldy #MaxItemNameLength + 3  ;col
   434  c182 18                    clc
   435  c183 20f0ff                jsr SetCursor
   436                          ; print type
   437  c186 a91f                  lda #TypeColor
   438  c188 20d2ff                jsr SendChar
   439  c18b a2a6                  ldx #<TblItemType
   440  c18d a0c9                  ldy #>TblItemType
   441  c18f ad0ede                lda rRegItemType+IO1Port 
   442  c192 204ac3                jsr Print4CharTable
   443                          ;print ROM #
   444  c195 a997                  lda #ROMNumColor
   445  c197 20d2ff                jsr SendChar
   446  c19a ad0cde                lda rwRegSelItem+IO1Port
   447  c19d 2015c3                jsr PrintHexByte
   448                             
   449                          ;line is done printing, check for next...
   450  c1a0 68                    pla ;menu select letter
   451  c1a1 ee0cde                inc rwRegSelItem+IO1Port
   452  c1a4 ae0cde                ldx rwRegSelItem+IO1Port
   453  c1a7 ec0dde                cpx rRegNumItems+IO1Port
   454  c1aa f007                  beq finishMenu
   455  c1ac 18                    clc
   456  c1ad 6901                  adc #01
   457  c1af c9d1                  cmp #'A' + MaxMenuDispItems
   458  c1b1 d099                  bne nextLine  
   459                          finishMenu
   460  c1b3 a214                  ldx #20 ;row
   461  c1b5 a000                  ldy #0  ;col
   462  c1b7 18                    clc
   463  c1b8 20f0ff                jsr SetCursor
   464  c1bb a970                  lda #<MsgSelect
   465  c1bd a0c6                  ldy #>MsgSelect
   466  c1bf 201eab                jsr PrintString
   467  c1c2 60                    rts
   468                          
   469                          ;Execute/select an item from the list
   470                          ; Dir, ROM, copy PRG to RAM and run, etc
   471                          ;Pre-Load rwRegSelItem+IO1Port with Item # to execute/select
   472                          SelectMenuItem:
   473  c1c3 ac0ede                ldy rRegItemType+IO1Port ;grab this now it will change if new directory is loaded
   474  c1c6 a902                  lda #rCtlStartSelItemWAIT
   475  c1c8 8d05de                sta wRegControl+IO1Port
   476  c1cb 2070c2                jsr WaitForTR ;if it's a good ROM/crt image, it won't return from this
   477  c1ce c004                  cpy #rtPrg
   478  c1d0 f004                  beq XferCopyRun  ;if it's a program, x-fer and launch, otherwise reprint menu and return
   479  c1d2 20f7c0                jsr ListMenuItemsInit
   480  c1d5 60                    rts
   481                             
   482                          XferCopyRun:
   483                             ;copy PRGLoadStart code to tape buffer area in case this (Cxxx) area gets overwritten
   484                             ;192 byte limit, watch size of PRGLoadStart block!  check below
   485  c1d6 ad03de                lda rRegStrAvailable+IO1Port
   486  c1d9 d007                  bne +
   487  c1db a994                  lda #<MsgErrNoData;no data to read!
   488  c1dd a0c9                  ldy #>MsgErrNoData
   489  c1df 4c80c2                jmp ErrOut
   490                             ;no going back now...
   491  c1e2 20d6c5             +  jsr SIDMusicOff    
   492  c1e5 a97e                  lda #<MsgLoading
   493  c1e7 a0c9                  ldy #>MsgLoading
   494  c1e9 201eab                jsr PrintString
   495  c1ec a90f                  lda #<rRegItemNameStart+IO1Port
   496  c1ee a0de                  ldy #>rRegItemNameStart+IO1Port
   497  c1f0 201eab                jsr PrintString
   498                          
   499  c1f3 a9c2                  lda #>PRGLoadStart
   500  c1f5 a011                  ldy #<PRGLoadStart   
   501  c1f7 85fc                  sta PtrAddrHi
   502  c1f9 84fb                  sty PtrAddrLo 
   503  c1fb a903                  lda #>PRGLoadStartReloc
   504  c1fd a03c                  ldy #<PRGLoadStartReloc   
   505  c1ff 85fe                  sta Ptr2AddrHi
   506  c201 84fd                  sty Ptr2AddrLo 
   507  c203 a000                  ldy #$00
   508  c205 b1fb               -  lda (PtrAddrLo), y 
   509  c207 91fd                  sta (Ptr2AddrLo),y
   510  c209 c8                    iny
   511  c20a c05f                  cpy #PRGLoadEnd-PRGLoadStart  ;check length in build report here
   512  c20c d0f7                  bne -   
   513  c20e 4c3c03                jmp PRGLoadStartReloc
   514                          
   515                          PRGLoadStart:
   516                             ;this code is relocated to PRGLoadStartReloc and run from there as it 
   517                             ;could overwrite all upper RAM.  Will not execute correctly from here (string pointers)
   518                             ;stream PRG file from TeensyROM to RAM and set end of prg/start of variables
   519                             ;assumes TeensyROM is set up to transfer, PRG selected and waited to complete
   520                             ;rRegStrAvailable+IO1Port is zero when inactive/complete
   521                          
   522                             ;jsr $A644 ;new   
   523  c211 ad02de                lda rRegStrAddrHi+IO1Port
   524  c214 85fc                  sta PtrAddrHi
   525  c216 ad01de                lda rRegStrAddrLo+IO1Port   
   526  c219 85fb                  sta PtrAddrLo
   527  c21b a000                  ldy #0   ;zero offset
   528                             
   529  c21d ad03de             -  lda rRegStrAvailable+IO1Port ;are we done?
   530  c220 f016                  beq +   ;exit the loop
   531  c222 ad04de                lda rRegStreamData+IO1Port ;read from rRegStreamData+IO1Port increments address & checks for end
   532  c225 91fb                  sta (PtrAddrLo), y 
   533  c227 c8                    iny
   534  c228 d0f3                  bne -
   535  c22a e6fc                  inc PtrAddrHi
   536  c22c d0ef                  bne -
   537                             ;good luck if we get to here... Trying to overflow and write to zero page
   538  c22e a98f                  lda #<(MsgOverflow - PRGLoadStart + PRGLoadStartReloc) ; corrected for reloc 
   539  c230 a003                  ldy #>(MsgOverflow - PRGLoadStart + PRGLoadStartReloc)
   540  c232 201eab                jsr PrintString   ;$ab1e
   541  c235 6c02a0                jmp (BasicWarmStartVect)
   542                             ;last byte of prg (+1) = y+PtrAddrLo/Hi, store this in 2D/2E
   543  c238 a6fc               +  ldx PtrAddrHi
   544  c23a 98                    tya
   545  c23b 18                    clc
   546  c23c 65fb                  adc PtrAddrLo
   547  c23e 9001                  bcc +
   548  c240 e8                    inx
   549  c241 852d               +  sta $2d  ;start of BASIC variables pointer (Lo)
   550  c243 862e                  stx $2e  ; (Hi)
   551  c245 85ae                  sta $ae  ;End of load address (Lo)
   552  c247 86af                  stx $af  ; (Hi)
   553                             
   554  c249 a984                  lda #<(MsgRunning - PRGLoadStart + PRGLoadStartReloc) ; corrected for reloc
   555  c24b a003                  ldy #>(MsgRunning - PRGLoadStart + PRGLoadStartReloc)
   556  c24d 201eab                jsr PrintString   ;$ab1e
   557                             ;as is done at $A52A    https://skoolkid.github.io/sk6502/c64rom/asm/A49C.html#A52A
   558  c250 2059a6                jsr $a659	;reset execution to start, clear variables and flush stack
   559  c253 2033a5                jsr $a533	;rebuild BASIC line chaining
   560                             ;Also see https://codebase64.org/doku.php?id=base:runbasicprg
   561  c256 4caea7                jmp $a7ae ;BASIC warm start/interpreter inner loop/next statement (Run)
   562                             ;jmp (BasicWarmStartVect)  
   563                          MsgRunning:
   564  c259 0d0d52554e4e494e...   !tx ChrReturn, ChrReturn, "running", ChrReturn, 0
   565                          MsgOverflow:
   566  c264 0d4f564552464c4f...   !tx ChrReturn, "overflow!", ChrReturn, 0
   567                          PRGLoadEnd = *
   568                               
   569                               
   570                          WaitForTR:  ;wait for ready status, uses acc and X
   571  c270 a205                  ldx#5 ;require 5 consecutive reads of ready to continue
   572  c272 ee4e04                inc ScreenMemStart+40*2-2 ;spinner @ end of 'Time' print loc.
   573  c275 ad00de             -  lda rRegStatus+IO1Port
   574  c278 c95a                  cmp #rsReady
   575  c27a d0f4                  bne WaitForTR
   576  c27c ca                    dex
   577  c27d d0f6                  bne -
   578  c27f 60                    rts
   579                          
   580                          ErrOut:   
   581                             ;Error msg pointer stored in acc/y
   582  c280 48                    pha
   583  c281 98                    tya
   584  c282 48                    pha
   585  c283 a213                  ldx #19 ;row
   586  c285 a000                  ldy #0  ;col
   587  c287 18                    clc
   588  c288 20f0ff                jsr SetCursor
   589  c28b a98b                  lda #<MsgError
   590  c28d a0c9                  ldy #>MsgError
   591  c28f 201eab                jsr PrintString   
   592  c292 68                    pla
   593  c293 a8                    tay
   594  c294 68                    pla
   595  c295 201eab                jsr PrintString
   596  c298 60                    rts
   597                          
   598                          SynchEthernetTime:
   599  c299 a903                  lda #rCtlGetTimeWAIT
   600  c29b 8d05de                sta wRegControl+IO1Port
   601  c29e 2070c2                jsr WaitForTR 
   602  c2a1 ad08de                lda rRegLastHourBCD+IO1Port
   603  c2a4 8d0bdc                sta TODHoursBCD  ;stop TOD regs incrementing
   604  c2a7 ad09de                lda rRegLastMinBCD+IO1Port
   605  c2aa 8d0adc                sta TODMinBCD
   606  c2ad ad0ade                lda rRegLastSecBCD+IO1Port
   607  c2b0 8d09dc                sta TODSecBCD
   608  c2b3 a909                  lda #9
   609  c2b5 8d08dc                sta TODTenthSecBCD ;have to write 10ths to release latch, start incrementing
   610  c2b8 60                    rts
   611                             
   612                          DisplayTime:
   613  c2b9 a201                  ldx #1 ;row
   614  c2bb a01d                  ldy #29  ;col
   615  c2bd 18                    clc
   616  c2be 20f0ff                jsr SetCursor
   617  c2c1 a981                  lda #TimeColor
   618  c2c3 20d2ff                jsr SendChar
   619  c2c6 ad0bdc                lda TODHoursBCD ;latches time in regs (stops incrementing)
   620  c2c9 a8                    tay ;save for re-use
   621  c2ca 291f                  and #$1f
   622  c2cc d004                  bne nz   ;if hours is 0, make it 12...
   623  c2ce 98                    tya
   624  c2cf 0912                  ora #$12
   625  c2d1 a8                    tay ;re-save for re-use
   626  c2d2 98                 nz tya
   627  c2d3 2910                  and #$10
   628  c2d5 d005                  bne +
   629  c2d7 a920                  lda #ChrSpace
   630  c2d9 4cdec2                jmp ++
   631  c2dc a931               +  lda #'1'
   632  c2de 20d2ff             ++ jsr SendChar
   633  c2e1 98                    tya
   634  c2e2 290f                  and #$0f  ;ones of hours
   635  c2e4 2022c3                jsr PrintHexNibble
   636  c2e7 a93a                  lda #':'
   637  c2e9 20d2ff                jsr SendChar
   638  c2ec ad0adc                lda TODMinBCD
   639  c2ef 2015c3                jsr PrintHexByte
   640  c2f2 a93a                  lda #':'
   641  c2f4 20d2ff                jsr SendChar
   642  c2f7 ad09dc                lda TODSecBCD
   643  c2fa 2015c3                jsr PrintHexByte
   644                             ;lda #'.'
   645                             ;jsr SendChar
   646  c2fd ad08dc                lda TODTenthSecBCD ;have to read 10ths to release latch
   647                             ;jsr PrintHexNibble
   648  c300 98                    tya ;am/pm (pre latch release)
   649  c301 2980                  and #$80
   650  c303 d005                  bne +
   651  c305 a941                  lda #'a'
   652  c307 4c0cc3                jmp ++
   653  c30a a950               +  lda #'p'
   654  c30c 20d2ff             ++ jsr SendChar
   655  c30f a94d                  lda #'m'
   656  c311 20d2ff                jsr SendChar
   657  c314 60                    rts
   658                             
   659                          PrintHexByte:
   660                             ;Print byte value stored in acc in hex (2 chars)
   661  c315 48                    pha
   662  c316 4a                    lsr
   663  c317 4a                    lsr
   664  c318 4a                    lsr
   665  c319 4a                    lsr
   666  c31a 2022c3                jsr PrintHexNibble
   667  c31d 68                    pla
   668                             ;pha   ; preserve acc on return?
   669  c31e 2022c3                jsr PrintHexNibble
   670                             ;pla
   671  c321 60                    rts
   672                             
   673                          PrintHexNibble:   
   674                             ;Print value stored in lower nible acc in hex
   675                             ;trashes acc
   676  c322 290f                  and #$0f
   677  c324 c90a                  cmp #$0a
   678  c326 1006                  bpl l 
   679  c328 18                    clc
   680  c329 6930                  adc #'0'
   681  c32b 4c31c3                jmp pr
   682  c32e 18                 l  clc
   683  c32f 6937                  adc #'a'-$0a
   684  c331 20d2ff             pr jsr SendChar
   685  c334 60                    rts
   686                          
   687                          PrintOnOff:
   688                             ;Print "On" or "Off" based on Zero flag
   689                             ;uses A and Y regs
   690  c335 d007                  bne +
   691  c337 a97a                  lda #<MsgOff
   692  c339 a0c9                  ldy #>MsgOff
   693  c33b 4c42c3                jmp ++
   694  c33e a976               +  lda #<MsgOn
   695  c340 a0c9                  ldy #>MsgOn
   696  c342 201eab             ++ jsr PrintString 
   697  c345 60                    rts
   698                          
   699                          Print4CharTableHiNib
   700  c346 4a                    lsr
   701  c347 4a                    lsr
   702  c348 4a                    lsr
   703  c349 4a                    lsr ; move to lower nibble
   704                          Print4CharTable:   
   705                          ;prints 4 chars from a table of continuous 4 char sets (no termination)
   706                          ;X=table base lo, y=table base high, acc=index to item# (63 max)
   707                          ;   and #0xfc 
   708  c34a 86fb                  stx PtrAddrLo
   709  c34c 84fc                  sty PtrAddrHi
   710  c34e 0a                    asl
   711  c34f 0a                    asl  ;mult by 4
   712  c350 a8                    tay
   713  c351 b1fb               -  lda (PtrAddrLo),y
   714  c353 20d2ff                jsr SendChar   ;type (4 chars)
   715  c356 c8                    iny
   716  c357 98                    tya
   717  c358 2903                  and #3
   718  c35a d0f5                  bne -
   719  c35c 60                    rts
   720                             
   721                          ; ******************************* SID stuff ******************************* 
   722                          
   723                          MIDI2SID:
   724  c35d 20d6c5                jsr SIDMusicOff
   725  c360 a93a                  lda #<MsgBanner
   726  c362 a0c6                  ldy #>MsgBanner
   727  c364 201eab                jsr PrintString 
   728  c367 a9af                  lda #<MsgM2SPolyMenu
   729  c369 a0c7                  ldy #>MsgM2SPolyMenu
   730  c36b 201eab                jsr PrintString 
   731                             ;clear SID regs
   732  c36e a900                  lda #0
   733  c370 aa                    tax
   734  c371 9d00d4             -  sta SIDLoc, x
   735  c374 e8                    inx
   736  c375 e019                  cpx #(EndSIDRegs-StartSIDRegs)
   737  c377 d0f8                  bne -
   738                          
   739                             ;  set default local settings:
   740  c379 a90f                  lda #0x0f ; full volume
   741  c37b 8d18d4                sta SIDLoc+rRegSIDVolFltSel-StartSIDRegs
   742  c37e a902                  lda #0x02 ; 12.5% duty cycle (12 bit resolution, lo reg left at 0)
   743  c380 8d3803                sta SIDDutyHi
   744  c383 8d03d4                sta SIDLoc+rRegSIDDutyHi1-StartSIDRegs
   745  c386 8d0ad4                sta SIDLoc+rRegSIDDutyHi2-StartSIDRegs
   746  c389 8d11d4                sta SIDLoc+rRegSIDDutyHi3-StartSIDRegs
   747  c38c a940                  lda #0x40 ; pulse wave
   748  c38e 8d3503                sta SIDVoicCont
   749  c391 8d04d4                sta SIDLoc+rRegSIDVoicCont1-StartSIDRegs
   750  c394 8d0bd4                sta SIDLoc+rRegSIDVoicCont2-StartSIDRegs
   751  c397 8d12d4                sta SIDLoc+rRegSIDVoicCont3-StartSIDRegs
   752  c39a a923                  lda #0x23 ; Att=16mS, Dec=72mS
   753  c39c 8d3603                sta SIDAttDec
   754  c39f 8d05d4                sta SIDLoc+rRegSIDAttDec1-StartSIDRegs
   755  c3a2 8d0cd4                sta SIDLoc+rRegSIDAttDec2-StartSIDRegs
   756  c3a5 8d13d4                sta SIDLoc+rRegSIDAttDec3-StartSIDRegs
   757  c3a8 a934                  lda #0x34 ; Sus=20%, Rel=114mS
   758  c3aa 8d3703                sta SIDSusRel
   759  c3ad 8d06d4                sta SIDLoc+rRegSIDSusRel1-StartSIDRegs
   760  c3b0 8d0dd4                sta SIDLoc+rRegSIDSusRel2-StartSIDRegs
   761  c3b3 8d14d4                sta SIDLoc+rRegSIDSusRel3-StartSIDRegs
   762                             
   763                          M2SDispUpdate:  ;upadte all M2S status display values
   764  c3b6 a999                  lda #NameColor
   765  c3b8 20d2ff                jsr SendChar
   766  c3bb a205                  ldx # 5 ;row  Triangle
   767  c3bd a00e                  ldy #M2SDataColumn ;col
   768  c3bf 18                    clc
   769  c3c0 20f0ff                jsr SetCursor
   770  c3c3 ad3503                lda SIDVoicCont
   771  c3c6 2910                  and #0x10  
   772  c3c8 2035c3                jsr PrintOnOff
   773                             
   774  c3cb a206                  ldx # 6 ;row  Sawtooth
   775  c3cd a00e                  ldy #M2SDataColumn ;col
   776  c3cf 18                    clc
   777  c3d0 20f0ff                jsr SetCursor
   778  c3d3 ad3503                lda SIDVoicCont
   779  c3d6 2920                  and #0x20  
   780  c3d8 2035c3                jsr PrintOnOff
   781                             
   782  c3db a207                  ldx # 7 ;row  Pulse
   783  c3dd a00e                  ldy #M2SDataColumn ;col
   784  c3df 18                    clc
   785  c3e0 20f0ff                jsr SetCursor
   786  c3e3 ad3503                lda SIDVoicCont
   787  c3e6 2940                  and #0x40  
   788  c3e8 2035c3                jsr PrintOnOff
   789                             
   790  c3eb a208                  ldx #8 ;row  Duty Cycle
   791  c3ed a00e                  ldy #M2SDataColumn ;col
   792  c3ef 18                    clc
   793  c3f0 20f0ff                jsr SetCursor
   794  c3f3 a236                  ldx #<TblM2SDutyPct
   795  c3f5 a0c9                  ldy #>TblM2SDutyPct
   796  c3f7 ad3803                lda SIDDutyHi  ;duty cycle most sig nib = bits 3:0
   797  c3fa 290f                  and #$0f
   798  c3fc 204ac3                jsr Print4CharTable
   799  c3ff a925                  lda #'%'
   800  c401 20d2ff                jsr SendChar
   801                             
   802  c404 a209                  ldx # 9 ;row  Noise
   803  c406 a00e                  ldy #M2SDataColumn ;col
   804  c408 18                    clc
   805  c409 20f0ff                jsr SetCursor
   806  c40c ad3503                lda SIDVoicCont
   807  c40f 2980                  and #0x80  
   808  c411 2035c3                jsr PrintOnOff
   809                           
   810  c414 a20b                  ldx #11 ;row  attack
   811  c416 a00e                  ldy #M2SDataColumn ;col
   812  c418 18                    clc
   813  c419 20f0ff                jsr SetCursor
   814  c41c a276                  ldx #<TblM2SAttack
   815  c41e a0c8                  ldy #>TblM2SAttack
   816  c420 ad3603                lda SIDAttDec  ;attack = bits 7:4
   817  c423 2046c3                jsr Print4CharTableHiNib
   818  c426 a9d3                  lda #'S'
   819  c428 20d2ff                jsr SendChar
   820                          
   821  c42b a20c                  ldx #12 ;row  decay
   822  c42d a00e                  ldy #M2SDataColumn ;col
   823  c42f 18                    clc
   824  c430 20f0ff                jsr SetCursor
   825  c433 a2b6                  ldx #<TblM2SDecayRelease
   826  c435 a0c8                  ldy #>TblM2SDecayRelease
   827  c437 ad3603                lda SIDAttDec  ;decay = bits 3:0
   828  c43a 290f                  and #$0f
   829  c43c 204ac3                jsr Print4CharTable
   830  c43f a9d3                  lda #'S'
   831  c441 20d2ff                jsr SendChar
   832                          
   833  c444 a20d                  ldx #13 ;row  sustain
   834  c446 a00e                  ldy #M2SDataColumn ;col
   835  c448 18                    clc
   836  c449 20f0ff                jsr SetCursor
   837  c44c a2f6                  ldx #<TblM2SSustPct
   838  c44e a0c8                  ldy #>TblM2SSustPct
   839  c450 ad3703                lda SIDSusRel   ;sustain = bits 7:4
   840  c453 2046c3                jsr Print4CharTableHiNib
   841  c456 a925                  lda #'%'
   842  c458 20d2ff                jsr SendChar
   843                          
   844  c45b a20e                  ldx #14 ;row  release
   845  c45d a00e                  ldy #M2SDataColumn ;col
   846  c45f 18                    clc
   847  c460 20f0ff                jsr SetCursor
   848  c463 a2b6                  ldx #<TblM2SDecayRelease
   849  c465 a0c8                  ldy #>TblM2SDecayRelease
   850  c467 ad3703                lda SIDSusRel  ;release = bits 3:0
   851  c46a 290f                  and #$0f
   852  c46c 204ac3                jsr Print4CharTable
   853  c46f a9d3                  lda #'S'
   854  c471 20d2ff                jsr SendChar
   855                          
   856                          ;continue into the main loop...
   857                          M2SUpdateKeyInLoop:
   858                          ;refresh dynamic SID regs from MIDI:   todo: move this to an interrupt?
   859  c474 ad3503                lda SIDVoicCont  ;waveform in upper nibble
   860  c477 0d30de                ora IO1Port+rRegSIDVoicCont1 ;latch bit (0) from MIDI
   861  c47a 8d04d4                sta SIDLoc+rRegSIDVoicCont1-StartSIDRegs 
   862  c47d ad2dde                lda IO1Port+rRegSIDFreqHi1 
   863  c480 8d01d4                sta SIDLoc+rRegSIDFreqHi1-StartSIDRegs 
   864  c483 ad2cde                lda IO1Port+rRegSIDFreqLo1 
   865  c486 8d00d4                sta SIDLoc+rRegSIDFreqLo1-StartSIDRegs 
   866                          
   867  c489 ad3503                lda SIDVoicCont  ;waveform in upper nibble
   868  c48c 0d37de                ora IO1Port+rRegSIDVoicCont2 ;latch bit (0) from MIDI
   869  c48f 8d0bd4                sta SIDLoc+rRegSIDVoicCont2-StartSIDRegs 
   870  c492 ad34de                lda IO1Port+rRegSIDFreqHi2 
   871  c495 8d08d4                sta SIDLoc+rRegSIDFreqHi2-StartSIDRegs 
   872  c498 ad33de                lda IO1Port+rRegSIDFreqLo2 
   873  c49b 8d07d4                sta SIDLoc+rRegSIDFreqLo2-StartSIDRegs 
   874                          
   875  c49e ad3503                lda SIDVoicCont  ;waveform in upper nibble
   876  c4a1 0d3ede                ora IO1Port+rRegSIDVoicCont3 ;latch bit (0) from MIDI
   877  c4a4 8d12d4                sta SIDLoc+rRegSIDVoicCont3-StartSIDRegs 
   878  c4a7 ad3bde                lda IO1Port+rRegSIDFreqHi3 
   879  c4aa 8d0fd4                sta SIDLoc+rRegSIDFreqHi3-StartSIDRegs 
   880  c4ad ad3ade                lda IO1Port+rRegSIDFreqLo3 
   881  c4b0 8d0ed4                sta SIDLoc+rRegSIDFreqLo3-StartSIDRegs 
   882                          
   883  c4b3 20b9c2                jsr DisplayTime
   884  c4b6 a214                  ldx #20 ;row   ;print note vals
   885  c4b8 a003                  ldy #3  ;col
   886  c4ba 18                    clc
   887  c4bb 20f0ff                jsr SetCursor
   888  c4be a999                  lda #NameColor
   889  c4c0 20d2ff                jsr SendChar
   890  c4c3 a946                  lda #<IO1Port+rRegSIDStrStart
   891  c4c5 a0de                  ldy #>IO1Port+rRegSIDStrStart
   892  c4c7 201eab                jsr PrintString 
   893                             
   894  c4ca 20e4ff                jsr GetIn
   895  c4cd f0a5                  beq M2SUpdateKeyInLoop
   896                             
   897  c4cf c954                  cmp #'t'  ;Triangle
   898  c4d1 d00d                  bne +
   899  c4d3 a910                  lda #0x10
   900  c4d5 4d3503                eor SIDVoicCont
   901  c4d8 2970                  and #0x70  ;never combine with noise
   902  c4da 8d3503                sta SIDVoicCont
   903  c4dd 4cb6c3                jmp M2SDispUpdate
   904                          
   905  c4e0 c957               +  cmp #'w'  ;saWtooth
   906  c4e2 d00d                  bne +
   907  c4e4 a920                  lda #0x20 
   908  c4e6 4d3503                eor SIDVoicCont
   909  c4e9 2970                  and #0x70  ;never combine with noise
   910  c4eb 8d3503                sta SIDVoicCont
   911  c4ee 4cb6c3                jmp M2SDispUpdate
   912                          
   913  c4f1 c950               +  cmp #'p'  ;Pulse
   914  c4f3 d00d                  bne +
   915  c4f5 a940                  lda #0x40 
   916  c4f7 4d3503                eor SIDVoicCont
   917  c4fa 2970                  and #0x70  ;never combine with noise
   918  c4fc 8d3503                sta SIDVoicCont
   919  c4ff 4cb6c3                jmp M2SDispUpdate
   920                          
   921  c502 c955               +  cmp #'u'  ;dUty cycle
   922  c504 d013                  bne +
   923  c506 ae3803                ldx SIDDutyHi  ;duty cycle most sig nib = bits 3:0, upper unused
   924  c509 e8                    inx
   925  c50a 8e3803                stx SIDDutyHi ;apply change at time of update
   926  c50d 8e03d4                stx SIDLoc+rRegSIDDutyHi1-StartSIDRegs
   927  c510 8e0ad4                stx SIDLoc+rRegSIDDutyHi2-StartSIDRegs
   928  c513 8e11d4                stx SIDLoc+rRegSIDDutyHi3-StartSIDRegs
   929  c516 4cb6c3                jmp M2SDispUpdate
   930                          
   931  c519 c94e               +  cmp #'n'  ;Noise
   932  c51b d008                  bne +
   933  c51d a980                  lda #0x80 
   934                             ;eor SIDVoicCont  ;doesn't play nice with others
   935  c51f 8d3503                sta SIDVoicCont
   936  c522 4cb6c3                jmp M2SDispUpdate
   937                          
   938  c525 c941               +  cmp #'a'  ;Attack
   939  c527 d015                  bne +
   940  c529 ad3603                lda SIDAttDec  ;attack = bits 7:4
   941  c52c 18                    clc
   942  c52d 6910                  adc #$10
   943  c52f 8d3603                sta SIDAttDec ;apply change at time of update
   944  c532 8d05d4                sta SIDLoc+rRegSIDAttDec1-StartSIDRegs
   945  c535 8d0cd4                sta SIDLoc+rRegSIDAttDec2-StartSIDRegs
   946  c538 8d13d4                sta SIDLoc+rRegSIDAttDec3-StartSIDRegs
   947  c53b 4cb6c3                jmp M2SDispUpdate
   948                          
   949  c53e c944               +  cmp #'d'  ;Decay
   950  c540 d021                  bne +
   951  c542 ad3603                lda SIDAttDec  ;decay = bits 3:0
   952  c545 aa                    tax
   953  c546 290f                  and #$0f
   954  c548 c90f                  cmp #$0f
   955  c54a d006                  bne dok
   956  c54c 8a                    txa
   957  c54d 29f0                  and #$f0 ;Wrap Around without overflow
   958  c54f 4c54c5                jmp dcnt
   959                          dok   
   960  c552 e8                    inx
   961  c553 8a                    txa
   962                          dcnt
   963  c554 8d3603                sta SIDAttDec ;apply change at time of update
   964  c557 8d05d4                sta SIDLoc+rRegSIDAttDec1-StartSIDRegs
   965  c55a 8d0cd4                sta SIDLoc+rRegSIDAttDec2-StartSIDRegs
   966  c55d 8d13d4                sta SIDLoc+rRegSIDAttDec3-StartSIDRegs
   967  c560 4cb6c3                jmp M2SDispUpdate
   968                          
   969  c563 c953               +  cmp #'s'  ;Sustain
   970  c565 d015                  bne +
   971  c567 ad3703                lda SIDSusRel  ;sustain = bits 7:4
   972  c56a 18                    clc
   973  c56b 6910                  adc #$10
   974  c56d 8d3703                sta SIDSusRel ;apply change at time of update
   975  c570 8d06d4                sta SIDLoc+rRegSIDSusRel1-StartSIDRegs
   976  c573 8d0dd4                sta SIDLoc+rRegSIDSusRel2-StartSIDRegs
   977  c576 8d14d4                sta SIDLoc+rRegSIDSusRel3-StartSIDRegs
   978  c579 4cb6c3                jmp M2SDispUpdate
   979                          
   980  c57c c952               +  cmp #'r'  ;Release
   981  c57e d021                  bne +
   982  c580 ad3703                lda SIDSusRel  ;release = bits 3:0
   983  c583 aa                    tax
   984  c584 290f                  and #$0f
   985  c586 c90f                  cmp #$0f
   986  c588 d006                  bne rok
   987  c58a 8a                    txa
   988  c58b 29f0                  and #$f0 ;Wrap Around without overflow
   989  c58d 4c92c5                jmp rcnt
   990                          rok   
   991  c590 e8                    inx
   992  c591 8a                    txa
   993                          rcnt
   994  c592 8d3703                sta SIDSusRel ;apply change at time of update
   995  c595 8d06d4                sta SIDLoc+rRegSIDSusRel1-StartSIDRegs
   996  c598 8d0dd4                sta SIDLoc+rRegSIDSusRel2-StartSIDRegs
   997  c59b 8d14d4                sta SIDLoc+rRegSIDSusRel3-StartSIDRegs
   998  c59e 4cb6c3                jmp M2SDispUpdate
   999                          
  1000  c5a1 c958               +  cmp #'x'  ;Exit M2S
  1001  c5a3 d004                  bne +
  1002  c5a5 20fbc5                jsr SIDVoicesOff
  1003  c5a8 60                    rts 
  1004                          
  1005  c5a9 4c74c4             +  jmp M2SUpdateKeyInLoop
  1006                          
  1007                             
  1008                          SIDMusicOn:  ;Start SID interrupt
  1009  c5ac a97f                  lda #$7f    ;disable all ints
  1010  c5ae 8d0ddc                sta $dc0d   ;CIA1 int ctl
  1011  c5b1 ad0ddc                lda $dc0d   ;CIA1 int ctl    reading clears
  1012  c5b4 78                    sei
  1013  c5b5 a901                  lda #$01    ;raster compare enable
  1014  c5b7 8d1ad0                sta $d01a   ;irq mask reg
  1015  c5ba 8d19d0                sta $d019   ;ACK any raster IRQs
  1016  c5bd a964                  lda #100    ;mid screen
  1017  c5bf 8d12d0                sta $d012   ;raster scan line compare reg
  1018  c5c2 ad11d0                lda $d011   ;VIC ctl reg fine scrolling/control
  1019  c5c5 297f                  AND #$7f    ;bit 7 is bit 8 of scan line compare
  1020  c5c7 8d11d0                sta $d011   ;VIC ctl reg fine scrolling/control
  1021  c5ca a907                  lda #<irqRastSID
  1022  c5cc a2c6                  ldx #>irqRastSID
  1023  c5ce 8d1403                sta $314    ;CINV, HW IRQ Int Lo
  1024  c5d1 8e1503                stx $315    ;CINV, HW IRQ Int Hi
  1025  c5d4 58                    cli
  1026  c5d5 60                    rts
  1027                          
  1028                          SIDMusicOff:  ;stop SID interrupt
  1029  c5d6 78                    sei
  1030  c5d7 a931                  lda #<IRQDefault
  1031  c5d9 a2ea                  ldx #>IRQDefault
  1032  c5db 8d1403                sta $314   ;CINV, HW IRQ Int Lo
  1033  c5de 8e1503                stx $315   ;CINV, HW IRQ Int Hi
  1034  c5e1 a981                  lda #$81
  1035  c5e3 8d0ddc                sta $dc0d  ;CIA int ctl
  1036  c5e6 a900                  lda #0
  1037  c5e8 8d1ad0                sta $d01a  ;irq enable
  1038  c5eb ee19d0                inc $d019
  1039  c5ee ad0ddc                lda $dc0d  ;CIA int ctl
  1040                             ;jsr SIDCodeRAM  ;turns voices off, but resets song to start
  1041  c5f1 20fbc5                jsr SIDVoicesOff
  1042  c5f4 58                    cli 
  1043  c5f5 a904                  lda #BorderColor
  1044  c5f7 8d20d0                sta BorderColorReg   ;restore border in case we ended in mid region
  1045  c5fa 60                    rts
  1046                          
  1047                          SIDVoicesOff:
  1048  c5fb a900                  lda #0x00 ; turn 3 voices off
  1049  c5fd 8d04d4                sta SIDLoc+rRegSIDVoicCont1-StartSIDRegs
  1050  c600 8d0bd4                sta SIDLoc+rRegSIDVoicCont2-StartSIDRegs
  1051  c603 8d12d4                sta SIDLoc+rRegSIDVoicCont3-StartSIDRegs 
  1052  c606 60                    rts
  1053                             
  1054                          irqRastSID:
  1055  c607 ee19d0                inc $d019   ;ACK raster IRQs
  1056  c60a ee20d0                inc BorderColorReg ;tweak display border
  1057  c60d 200310                jsr SIDCodeRAM+3 ;Play the music
  1058  c610 a922                  lda #<irqRast2
  1059  c612 a2c6                  ldx #>irqRast2
  1060  c614 8d1403                sta $314    ;CINV, HW IRQ Int Lo
  1061  c617 8e1503                stx $315    ;CINV, HW IRQ Int Hi
  1062  c61a a9c8                  lda #200    ;loweer part of screen
  1063  c61c 8d12d0                sta $d012   ;raster scan line compare reg
  1064  c61f 4c31ea                jmp IRQDefault
  1065                          
  1066                          irqRast2:
  1067  c622 ee19d0                inc $d019   ;ACK raster IRQs
  1068  c625 ce20d0                dec BorderColorReg ;tweak it back
  1069  c628 a907                  lda #<irqRastSID
  1070  c62a a2c6                  ldx #>irqRastSID
  1071  c62c 8d1403                sta $314    ;CINV, HW IRQ Int Lo
  1072  c62f 8e1503                stx $315    ;CINV, HW IRQ Int Hi
  1073  c632 a964                  lda #100    ;upper part of screen
  1074  c634 8d12d0                sta $d012   ;raster scan line compare reg
  1075                             
  1076  c637 4c31ea                jmp IRQDefault
  1077                          
  1078                          ; ******************************* Strings/Messages ******************************* 
  1079                          MmmmmmmmmmessagesText:
  1080                          MsgBanner:    
  1081  c63a 930e9c1220202020...   !tx ChrClear, ChrToLower, ChrPurple, ChrRvsOn, "             TeensyROM v0.5             ", ChrRvsOff, 0
  1082                          MsgFrom:    
  1083  c668 0d9ac6524f4d2000      !tx ChrReturn, SourcesColor, "From ", 0 
  1084                          MsgSelect:
  1085  c670 9ad34f5552434553...   !tx SourcesColor, "Sources:          "
  1086  c683 129ed550921e2f12...   !tx ChrRvsOn, OptionColor, "Up", ChrRvsOff, MenuMiscColor, "/", ChrRvsOn, OptionColor, "Dn", ChrRvsOff, MenuMiscColor, "CRSR: Page", ChrReturn
  1087  c69b 20129ec631929a20...   !tx " ", ChrRvsOn, OptionColor, "F1", ChrRvsOff, SourcesColor,  " Teensy Mem   "
  1088  c6b0 20129ec632921e20...   !tx " ", ChrRvsOn, OptionColor, "F2", ChrRvsOff, MenuMiscColor, " Exit to BASIC", ChrReturn
  1089  c6c6 20129ec633929a20...   !tx " ", ChrRvsOn, OptionColor, "F3", ChrRvsOff, SourcesColor,  " SD Card      "
  1090  c6db 20129ec634921e20...   !tx " ", ChrRvsOn, OptionColor, "F4", ChrRvsOff, MenuMiscColor, " Music on/off", ChrReturn
  1091  c6f0 20129ec635929a20...   !tx " ", ChrRvsOn, OptionColor, "F5", ChrRvsOff, SourcesColor,  " USB Drive    "
  1092  c705 20129ec636921e20...   !tx " ", ChrRvsOn, OptionColor, "F6", ChrRvsOff, MenuMiscColor, " Ethernet Time Sync", ChrReturn
  1093  c720 20129ec637929a20...   !tx " ", ChrRvsOn, OptionColor, "F7", ChrRvsOff, SourcesColor,  " USB Host     "
  1094  c735 20129ec638921e20...   !tx " ", ChrRvsOn, OptionColor, "F8", ChrRvsOff, MenuMiscColor, " MIDI to SID"
  1095  c748 00                     !tx 0
  1096                          MsgNoHW:
  1097  c749 0d0d0e9ed445454e...   !tx ChrReturn, ChrReturn, ChrToLower, ChrYellow, "TeensyROM hardware not detected!!!", ChrReturn, 0
  1098                          MsgNoItems:
  1099  c771 0d9e20ce4f544849...   !tx ChrReturn, OptionColor, " Nothing to show!", 0
  1100                          
  1101                          MsgMenuSD:
  1102  c785 d3c420c34152443a...   !tx "SD Card:", 0
  1103                          MsgMenuTeensy:
  1104  c78e d445454e535920cd...   !tx "Teensy Mem:", 0
  1105                          MsgMenuUSBHost:
  1106  c79a d5d3c220c84f5354...   !tx "USB Host:", 0
  1107                          MsgMenuUSBDrive:
  1108  c7a4 d5d3c220c4524956...   !tx "USB Drive:", 0
  1109                          
  1110                          MsgM2SPolyMenu:    
  1111  c7af 0d0d9acdc9c4c920...   !tx ChrReturn, ChrReturn, SourcesColor, "MIDI to SID Polyphonic Mode"
  1112  c7cd 0d0d9e                !tx ChrReturn, ChrReturn, OptionColor 
  1113  c7d0 20202012d4925249...   !tx "   ", ChrRvsOn, "T", ChrRvsOff, "riangle:", ChrReturn
  1114  c7df 20d34112d792544f...   !tx " Sa", ChrRvsOn, "W", ChrRvsOff, "tooth:", ChrReturn
  1115  c7ec 20202012d092554c...   !tx "   ", ChrRvsOn, "P", ChrRvsOff, "ulse:", ChrReturn
  1116  c7f8 2020c412d5925459...   !tx "  D", ChrRvsOn, "U", ChrRvsOff, "ty Cycle:", ChrReturn
  1117  c808 20202012ce924f49...   !tx "   ", ChrRvsOn, "N", ChrRvsOff, "oise:", ChrReturn
  1118  c814 0d                    !tx ChrReturn
  1119  c815 20202012c1925454...   !tx "   ", ChrRvsOn, "A", ChrRvsOff, "ttack:", ChrReturn
  1120  c822 20202012c4924543...   !tx "   ", ChrRvsOn, "D", ChrRvsOff, "ecay:", ChrReturn
  1121  c82e 20202012d3925553...   !tx "   ", ChrRvsOn, "S", ChrRvsOff, "ustain:", ChrReturn
  1122  c83c 20202012d292454c...   !tx "   ", ChrRvsOn, "R", ChrRvsOff, "elease:", ChrReturn
  1123  c84a 0d                    !tx ChrReturn
  1124  c84b 2020c51258924954...   !tx "  E", ChrRvsOn, "x", ChrRvsOff, "it", ChrReturn
  1125  c854 0d                    !tx ChrReturn
  1126  c855 2020ce4f5720d04c...   !tx "  Now Playing:", ChrReturn
  1127  c864 202020d6312020d6...   !tx "   V1  V2  V3  X", ChrReturn
  1128  c875 00                    !tx 0
  1129                          TblM2SAttack:  ;4 bytes each, no term
  1130  c876 2020324d2020384d...   !tx "  2m","  8m"," 16m"," 24m"," 38m"," 56m"," 68m"," 80m"
  1131  c896 3130304d3235304d...   !tx "100m","250m","500m","800m","   1","   3","   5","   8"
  1132                          TblM2SDecayRelease:  ;4 bytes each, no term
  1133  c8b6 2020364d2032344d...   !tx "  6m"," 24m"," 48m"," 72m","114m","168m","204m","240m"
  1134  c8d6 3330304d3735304d...   !tx "300m","750m"," 1.5"," 2.4","   3","   9","  15","  24"
  1135                          TblM2SSustPct:  ;4 bytes each, no term
  1136  c8f6 20302e3020362e37...   !tx " 0.0"," 6.7","13.3","20.0","26.7","33.3","40.0","46.7"
  1137  c916 35332e3336302e30...   !tx "53.3","60.0","66.7","73.3","80.0","86.7","93.3"," 100"
  1138                          TblM2SDutyPct:  ;4 bytes each, no term
  1139  c936 20302e3020362e33...   !tx " 0.0"," 6.3","12.5","18.8","25.0","31.3","37.5","43.8"
  1140  c956 35302e3035362e33...   !tx "50.0","56.3","62.5","68.8","75.0","81.3","87.5","93.8"
  1141                          MsgOn:
  1142  c976 cf4e2000              !tx "On ", 0
  1143                          MsgOff:
  1144  c97a cf464600              !tx "Off", 0
  1145                          MsgLoading:
  1146  c97e 939e8e4c4f414449...   !tx ChrClear, ChrYellow, ChrToUpper, "loading: ", 0
  1147                          MsgError:
  1148  c98b 1cc552524f523a20...   !tx ChrRed, "Error: ", 0
  1149                          MsgErrNoData:
  1150  c994 ce4f20c441544120...   !tx "No Data Available", 0
  1151                          ;MsgErrNoFile:
  1152                          ;   !tx "No File Available", 0
  1153                             
  1154                          TblItemType: ;must match rtNone, rt16k, etc order!
  1155  c9a6 2d2d2d2031364b20...   !tx "--- ","16k ","8Hi ","8Lo ","Prg ","Unk ","Crt ","Dir " ;4 bytes each, no term
  1156                             
  1157                          EndOfAllCode = *
  1158                          


; ******** Source: source\MainMenu_C000.asm
     1                          ; MIT License
     2                          ; 
     3                          ; Copyright (c) 2023 Travis Smith
     4                          ; 
     5                          ; Permission is hereby granted, free of charge, to any person obtaining a copy of this software 
     6                          ; and associated documentation files (the "Software"), to deal in the Software without 
     7                          ; restriction, including without limitation the rights to use, copy, modify, merge, publish, 
     8                          ; distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom 
     9                          ; the Software is furnished to do so, subject to the following conditions:
    10                          ; 
    11                          ; The above copyright notice and this permission notice shall be included in all copies or 
    12                          ; substantial portions of the Software.
    13                          ; 
    14                          ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING 
    15                          ; BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
    16                          ; NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
    17                          ; DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
    18                          ; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    19                          
    20                          
    21                          ; ********************************   Symbols   ********************************   
    22                             !convtab pet   ;key in and text out conv to PetSCII throughout
    23                          
    24                             ;RAM Registers:
    25                             PtrAddrLo   = $fb
    26                             PtrAddrHi   = $fc
    27                             Ptr2AddrLo  = $fd
    28                             Ptr2AddrHi  = $fe
    29                             RegMenuPageStart = $4e
    30                             
    31                             ;RAM coppies:
    32                             MainCodeRAM = $c000    ;this file
    33                             SIDCodeRAM = $1000 
    34                          
    35                             ScreenMemStart    = $0400
    36                             BorderColorReg    = $d020 
    37                             BackgndColorReg   = $d021
    38                             SIDLoc            = $d400
    39                             IO1Port           = $de00
    40                             TODHoursBCD       = $dc0b
    41                             TODMinBCD         = $dc0a
    42                             TODSecBCD         = $dc09
    43                             TODTenthSecBCD    = $dc08
    44                             
    45                             ;!!!!!These need to match Teensy Code: Menu_Regs.h !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    46                             MaxItemNameLength = 28
    47                             
    48                             rRegStatus        =  0
    49                             rRegStrAddrLo     =  1
    50                             rRegStrAddrHi     =  2
    51                             rRegStreamData    =  3
    52                             wRegControl       =  4
    53                             rRegPresence1     =  5
    54                             rRegPresence2     =  6
    55                             rRegLastHourBCD   =  7
    56                             rRegLastMinBCD    =  8
    57                             rRegLastSecBCD    =  9
    58                             rWRegCurrMenuWAIT = 10
    59                             rwRegSelItem      = 11
    60                             rRegNumItems      = 12
    61                             rRegItemType      = 13
    62                          
    63                             StartSIDRegs      = 14 ;start of SID Regs, matching SID Reg order ($D400)
    64                             rRegSIDFreqLo1    = StartSIDRegs +  0
    65                             rRegSIDFreqHi1    = StartSIDRegs +  1
    66                             rRegSIDDutyLo1    = StartSIDRegs +  2
    67                             rRegSIDDutyHi1    = StartSIDRegs +  3
    68                             rRegSIDVoicCont1  = StartSIDRegs +  4
    69                             rRegSIDAttDec1    = StartSIDRegs +  5
    70                             rRegSIDSusRel1    = StartSIDRegs +  6
    71                          
    72                             rRegSIDFreqLo2    = StartSIDRegs +  7
    73                             rRegSIDFreqHi2    = StartSIDRegs +  8
    74                             rRegSIDDutyLo2    = StartSIDRegs +  9
    75                             rRegSIDDutyHi2    = StartSIDRegs + 10
    76                             rRegSIDVoicCont2  = StartSIDRegs + 11
    77                             rRegSIDAttDec2    = StartSIDRegs + 12
    78                             rRegSIDSusRel2    = StartSIDRegs + 13
    79                          
    80                             rRegSIDFreqLo3    = StartSIDRegs + 14
    81                             rRegSIDFreqHi3    = StartSIDRegs + 15
    82                             rRegSIDDutyLo3    = StartSIDRegs + 16
    83                             rRegSIDDutyHi3    = StartSIDRegs + 17
    84                             rRegSIDVoicCont3  = StartSIDRegs + 18
    85                             rRegSIDAttDec3    = StartSIDRegs + 19
    86                             rRegSIDSusRel3    = StartSIDRegs + 20
    87                          
    88                             rRegSIDFreqCutLo  = StartSIDRegs + 21
    89                             rRegSIDFreqCutHi  = StartSIDRegs + 22
    90                             rRegSIDFCtlReson  = StartSIDRegs + 23
    91                             rRegSIDVolFilSel  = StartSIDRegs + 24
    92                             EndSIDRegs        = StartSIDRegs + 25
    93                          
    94                             rRegItemName      = 40 ;MaxItemNameLength bytes long (incl term)
    95                          
    96                             rsReady      = 0x5a
    97                             rsChangeMenu = 0x9d
    98                             rsStartItem  = 0xb1
    99                             rsGetTime    = 0xe6
   100                             ;rsError      = 0x24
   101                          
   102                             rmtSD        = 0
   103                             rmtTeensy    = 1
   104                             rmtUSBHost   = 2
   105                             rmtUSBDrive  = 3
   106                             
   107                             rCtlVanish           = 0
   108                             rCtlVanishReset      = 1
   109                             rCtlStartSelItemWAIT = 2
   110                             rCtlGetTimeWAIT      = 3
   111                          
   112                             rtNone = 0  ;synch with TblItemType below
   113                             rt16k  = 1
   114                             rt8kHi = 2
   115                             rt8kLo = 3
   116                             rtPrg  = 4
   117                             rtUnk  = 5
   118                             rtCrt  = 6
   119                             rtDir  = 7
   120                             
   121                          ;!!!!!!!!!!!!!!!!  End Teensy matching  !!!!!!!!!!!!!!!!!!
   122                          
   123                          
   124                             ;Kernal routines:
   125                             IRQDefault = $ea31
   126                             SendChar   = $ffd2
   127                             ScanKey    = $ff9f ;SCNKEY
   128                             GetIn      = $ffe4 ;GETIN
   129                             SetCursor  = $fff0 ;PLOT
   130                             
   131                             ;BASIC routines:
   132                             BasicColdStartVect = $a000 ; $e394  58260
   133                             BasicWarmStartVect = $a002 ; $e37b  58235
   134                             PrintString =  $ab1e
   135                          
   136                             ;chr$ symbols
   137                             ChrBlack   = 144
   138                             ChrWhite   = 5
   139                             ChrRed     = 28
   140                             ChrCyan    = 159
   141                             ChrPurple  = 156
   142                             ChrGreen   = 30
   143                             ChrBlue    = 31
   144                             ChrYellow  = 158 
   145                             ChrOrange  = 129
   146                             ChrBrown   = 149
   147                             ChrLtRed   = 150
   148                             ChrDrkGrey = 151
   149                             ChrMedGrey = 152
   150                             ChrLtGreen = 153
   151                             ChrLtBlue  = 154
   152                             ChrLtGrey  = 155
   153                             
   154                             ChrF1      = 133
   155                             ChrF2      = 137
   156                             ChrF3      = 134
   157                             ChrF4      = 138
   158                             ChrF5      = 135
   159                             ChrF6      = 139
   160                             ChrF7      = 136
   161                             ChrF8      = 140
   162                             ChrToLower = 14
   163                             ChrToUpper = 142
   164                             ChrRvsOn   = 18
   165                             ChrRvsOff  = 146
   166                             ChrClear   = 147
   167                             ChrReturn  = 13
   168                             ChrSpace   = 32
   169                             ChrCSRSUp  = 145
   170                             ChrCSRSDn  = 17
   171                             
   172                          ;poke colors
   173                             pokeBlack   = 0
   174                             pokeWhite   = 1
   175                             pokeRed     = 2
   176                             pokeCyan    = 3
   177                             pokePurple  = 4
   178                             pokeGreen   = 5
   179                             pokeBlue    = 6
   180                             pokeYellow  = 7
   181                             pokeOrange  = 8
   182                             pokeBrown   = 9
   183                             pokeLtRed   = 10
   184                             pokeDrkGrey = 11
   185                             pokeMedGrey = 12
   186                             pokeLtGreen = 13
   187                             pokeLtBlue  = 14
   188                             pokeLtGrey  = 15
   189                             
   190                             ;color scheme:
   191                             BorderColor      = pokePurple
   192                             BackgndColor     = pokeBlack
   193                             TimeColor        = ChrOrange
   194                             MenuMiscColor    = ChrGreen
   195                             ROMNumColor      = ChrDrkGrey
   196                             OptionColor      = ChrYellow
   197                             SourcesColor     = ChrLtBlue
   198                             TypeColor        = ChrBlue
   199                             NameColor        = ChrLtGreen
   200                             MaxMenuDispItems = 16
   201                          
   202                          ;******************************* Main Code Start ************************************   
   203                          
   204                          * = MainCodeRAM
   205                          Start:
   206                          
   207                          ;screen setup:     
   208  c000 a904                  lda #BorderColor
   209  c002 8d20d0                sta BorderColorReg
   210  c005 a900                  lda #BackgndColor
   211  c007 8d21d0                sta BackgndColorReg
   212                             
   213  c00a 2015c3                jsr SIDMusicOn ;Start the music!
   214                             
   215                          ;check for HW:
   216  c00d ad05de                lda rRegPresence1+IO1Port
   217  c010 c955                  cmp #$55
   218  c012 d007                  bne NoHW
   219  c014 ad06de                lda rRegPresence2+IO1Port
   220  c017 c9aa                  cmp #$AA
   221  c019 f00a                  beq +
   222                          NoHW:
   223  c01b a980                  lda #<MsgNoHW
   224  c01d a0c4                  ldy #>MsgNoHW
   225  c01f 201eab                jsr PrintString  
   226  c022 4c22c0             -  jmp -
   227                          
   228  c025 a900               +  lda #rCtlVanish ;Deassert Game & ExROM
   229  c027 8d04de                sta wRegControl+IO1Port
   230                          
   231  c02a 20f0c0                jsr ListMenuItemsInit
   232  c02d 2059c2                jsr SynchEthernetTime
   233                          
   234                          WaitForKey:     
   235  c030 2079c2                jsr DisplayTime
   236                             ;jsr ScanKey  ;only needed if ints are off
   237  c033 20e4ff                jsr GetIn    
   238  c036 f0f8                  beq WaitForKey
   239                          
   240  c038 c941                  cmp #'a'  
   241  c03a 3018                  bmi +   ;skip if below 'a'
   242  c03c c952                  cmp #'a'+ MaxMenuDispItems + 1  
   243  c03e 1014                  bpl +   ;skip if above MaxMenuDispItems
   244                             ;jsr SendChar ;print entered char
   245                             ;convert to ROM number
   246  c040 38                    sec       ;set to subtract without carry
   247  c041 e941                  sbc #'a'  ;now 0-?
   248  c043 18                    clc
   249  c044 654e                  adc RegMenuPageStart   
   250                             ;ROMSelected, ROM num in acc
   251  c046 cd0cde                cmp rRegNumItems+IO1Port 
   252  c049 10e5                  bpl WaitForKey   ;skip if above num of ROMs
   253  c04b 8d0bde                sta rwRegSelItem+IO1Port ;select Item from list
   254  c04e 20c3c1                jsr SelectMenuItem
   255  c051 4c30c0                jmp WaitForKey
   256                          
   257  c054 c911               +  cmp #ChrCSRSDn  ;Next Page
   258  c056 d012                  bne +
   259  c058 a54e                  lda RegMenuPageStart
   260  c05a 18                    clc
   261  c05b 6910                  adc #MaxMenuDispItems
   262  c05d cd0cde                cmp rRegNumItems+IO1Port
   263  c060 10ce                  bpl WaitForKey  ;already on last page
   264  c062 854e                  sta RegMenuPageStart
   265  c064 20f4c0                jsr ListMenuItems
   266  c067 4c30c0                jmp WaitForKey
   267                          
   268  c06a c991               +  cmp #ChrCSRSUp  ;Prev Page
   269  c06c d00f                  bne +
   270  c06e a54e                  lda RegMenuPageStart
   271                             ;cmp #0     
   272  c070 f0be                  beq WaitForKey  ;already on first page
   273  c072 38                    sec
   274  c073 e910                  sbc #MaxMenuDispItems
   275  c075 854e                  sta RegMenuPageStart
   276  c077 20f4c0                jsr ListMenuItems
   277  c07a 4c30c0                jmp WaitForKey  
   278                          
   279  c07d c985               +  cmp #ChrF1  ;Teensy mem Menu
   280  c07f d008                  bne +
   281  c081 a901                  lda #rmtTeensy
   282  c083 20eac0                jsr ListMenuItemsChangeInit
   283  c086 4c30c0                jmp WaitForKey  
   284                          
   285  c089 c989               +  cmp #ChrF2  ;Exit to BASIC
   286  c08b d008                  bne +
   287  c08d a901                  lda #rCtlVanishReset ;reset to BASIC
   288  c08f 8d04de                sta wRegControl+IO1Port
   289  c092 4c92c0             -  jmp -  ;should be resetting to BASIC
   290                          
   291  c095 c986               +  cmp #ChrF3  ;SD Card Menu
   292  c097 d008                  bne +
   293  c099 a900                  lda #rmtSD
   294  c09b 20eac0                jsr ListMenuItemsChangeInit
   295  c09e 4c30c0                jmp WaitForKey  
   296                          
   297  c0a1 c98a               +  cmp #ChrF4  ;toggle music
   298  c0a3 d013                  bne +
   299  c0a5 a2c3                  ldx #>irqSID
   300  c0a7 ec1503                cpx $315  ;see if the IRQ is pointing at our SID routine
   301  c0aa f006                  beq on
   302  c0ac 2015c3                jsr SIDMusicOn ;sid is off, turn it on
   303  c0af 4c30c0                jmp WaitForKey
   304  c0b2 2041c3             on jsr SIDMusicOff ;sid is on, turn it off
   305  c0b5 4c30c0                jmp WaitForKey  
   306                          
   307  c0b8 c987               +  cmp #ChrF5  ;USB Drive Menu
   308  c0ba d008                  bne +
   309  c0bc a903                  lda #rmtUSBDrive
   310  c0be 20eac0                jsr ListMenuItemsChangeInit
   311  c0c1 4c30c0                jmp WaitForKey  
   312                          
   313  c0c4 c98b               +  cmp #ChrF6  ;Synch Ethernet Time
   314  c0c6 d006                  bne +
   315  c0c8 2059c2                jsr SynchEthernetTime
   316  c0cb 4c30c0                jmp WaitForKey  
   317                          
   318  c0ce c988               +  cmp #ChrF7  ;Exe USB Host file
   319  c0d0 d008                  bne +
   320  c0d2 a902                  lda #rmtUSBHost
   321  c0d4 20eac0                jsr ListMenuItemsChangeInit
   322  c0d7 4c30c0                jmp WaitForKey
   323                          
   324  c0da c98c               +  cmp #ChrF8  ;Credits, options, SID???
   325  c0dc d009                  bne +
   326  c0de 20f5c2                jsr MIDI2SID
   327  c0e1 20f4c0                jsr ListMenuItems
   328  c0e4 4c30c0                jmp WaitForKey
   329                          
   330                          
   331                          
   332  c0e7 4c30c0             +  jmp WaitForKey
   333                          
   334                             
   335                          ; ******************************* Subroutines ******************************* 
   336                          ;                           list out rom number, type, & names
   337                          
   338                          Sssssssssssssssssssssssubroutines:
   339                          ListMenuItemsChangeInit:  ;Prep: Load acc with menu to change to
   340  c0ea 8d0ade                sta rWRegCurrMenuWAIT+IO1Port  ;must wait on a write (load dir)
   341  c0ed 2002c2                jsr WaitForTR
   342                          ListMenuItemsInit:
   343  c0f0 a900                  lda #0       ;initialize to first Item
   344  c0f2 854e                  sta RegMenuPageStart
   345                          ListMenuItems:  ;Prep: load RegMenuPageStart with first ROM on menu page
   346  c0f4 a970                  lda #<MsgBanner
   347  c0f6 a0c3                  ldy #>MsgBanner
   348  c0f8 201eab                jsr PrintString 
   349  c0fb a99e                  lda #<MsgFrom
   350  c0fd a0c3                  ldy #>MsgFrom
   351  c0ff 201eab                jsr PrintString 
   352                             ;print menu source:
   353  c102 ad0ade                lda rWRegCurrMenuWAIT+IO1Port ;don't have to wait on a read
   354  c105 c900                  cmp #rmtSD
   355  c107 d007                  bne +
   356  c109 a9bc                  lda #<MsgMenuSD
   357  c10b a0c4                  ldy #>MsgMenuSD
   358  c10d 4c2ac1                jmp cont1
   359                          
   360  c110 c901               +  cmp #rmtTeensy
   361  c112 d007                  bne +
   362  c114 a9c5                  lda #<MsgMenuTeensy
   363  c116 a0c4                  ldy #>MsgMenuTeensy
   364  c118 4c2ac1                jmp cont1
   365                             
   366  c11b c903               +  cmp #rmtUSBDrive
   367  c11d d007                  bne +
   368  c11f a9db                  lda #<MsgMenuUSBDrive
   369  c121 a0c4                  ldy #>MsgMenuUSBDrive
   370  c123 4c2ac1                jmp cont1
   371                             
   372                          +  ;cmp #rmtUSBHost
   373                             ;bne +
   374  c126 a9d1                  lda #<MsgMenuUSBHost
   375  c128 a0c4                  ldy #>MsgMenuUSBHost
   376                             ;jmp cont1
   377                             
   378                          cont1   
   379  c12a 201eab                jsr PrintString
   380  c12d ad0cde                lda rRegNumItems+IO1Port
   381  c130 d00a                  bne +
   382  c132 a9a8                  lda #<MsgNoItems
   383  c134 a0c4                  ldy #>MsgNoItems
   384  c136 201eab                jsr PrintString
   385  c139 4cb3c1                jmp finishMenu
   386  c13c a54e               +  lda RegMenuPageStart
   387  c13e 8d0bde                sta rwRegSelItem+IO1Port
   388  c141 a9c1                  lda #'A' ;initialize to start of page
   389                          nextLine
   390  c143 48                    pha ;remember menu letter
   391  c144 a90d                  lda #ChrReturn
   392  c146 20d2ff                jsr SendChar
   393                             
   394                          ;print option letter
   395  c149 a99e                  lda #OptionColor
   396  c14b 20d2ff                jsr SendChar
   397  c14e a920                  lda #ChrSpace
   398  c150 20d2ff                jsr SendChar
   399  c153 a912                  lda #ChrRvsOn
   400  c155 20d2ff                jsr SendChar
   401  c158 68                    pla
   402  c159 48                    pha
   403  c15a 20d2ff                jsr SendChar
   404  c15d a992                  lda #ChrRvsOff
   405  c15f 20d2ff                jsr SendChar
   406  c162 a92d                  lda #'-'
   407  c164 20d2ff                jsr SendChar
   408                          ; print name
   409  c167 a999                  lda #NameColor
   410  c169 20d2ff                jsr SendChar
   411  c16c a928                  lda #<rRegItemName+IO1Port
   412  c16e a0de                  ldy #>rRegItemName+IO1Port
   413  c170 201eab                jsr PrintString
   414                          ;align to col
   415  c173 38                    sec
   416  c174 20f0ff                jsr SetCursor ;read current to load y (row)
   417  c177 a01f                  ldy #MaxItemNameLength + 3  ;col
   418  c179 18                    clc
   419  c17a 20f0ff                jsr SetCursor
   420                          ; print type
   421  c17d a91f                  lda #TypeColor
   422  c17f 20d2ff                jsr SendChar
   423  c182 ad0dde                lda rRegItemType+IO1Port 
   424  c185 18                    clc
   425  c186 2a                    rol
   426  c187 2a                    rol  ;mult by 4
   427  c188 a8                    tay
   428  c189 b90ac5             -  lda TblItemType,y
   429  c18c 20d2ff                jsr SendChar   ;type (4 chars)
   430  c18f c8                    iny
   431  c190 98                    tya
   432  c191 2903                  and #3
   433  c193 d0f4                  bne -
   434                          ;print ROM #
   435  c195 a997                  lda #ROMNumColor
   436  c197 20d2ff                jsr SendChar
   437  c19a ad0bde                lda rwRegSelItem+IO1Port
   438  c19d 20d5c2                jsr PrintHexByte
   439                             
   440                          ;line is done printing, check for next...
   441  c1a0 68                    pla ;menu select letter
   442  c1a1 ee0bde                inc rwRegSelItem+IO1Port
   443  c1a4 ae0bde                ldx rwRegSelItem+IO1Port
   444  c1a7 ec0cde                cpx rRegNumItems+IO1Port
   445  c1aa f007                  beq finishMenu
   446  c1ac 18                    clc
   447  c1ad 6901                  adc #01
   448  c1af c9d1                  cmp #'A' + MaxMenuDispItems
   449  c1b1 d090                  bne nextLine  
   450                          finishMenu
   451  c1b3 a214                  ldx #20 ;row
   452  c1b5 a000                  ldy #0  ;col
   453  c1b7 18                    clc
   454  c1b8 20f0ff                jsr SetCursor
   455  c1bb a9a6                  lda #<MsgSelect
   456  c1bd a0c3                  ldy #>MsgSelect
   457  c1bf 201eab                jsr PrintString
   458  c1c2 60                    rts
   459                          
   460                          ;Execute/select an item from the list
   461                          ; Dir, ROM, copy PRG to RAM and run, etc
   462                          ;Pre-Load rwRegSelItem+IO1Port with Item # to execute/select
   463                          SelectMenuItem:
   464  c1c3 ac0dde                ldy rRegItemType+IO1Port ;grab this now it will change if new directory is loaded
   465  c1c6 a902                  lda #rCtlStartSelItemWAIT
   466  c1c8 8d04de                sta wRegControl+IO1Port
   467  c1cb 2002c2                jsr WaitForTR ;if it's a good ROM image, it won't return from this
   468  c1ce c004                  cpy #rtPrg
   469  c1d0 f004                  beq PRGStart ;if it's a program, x-fer and lunch, otherwise reprint menu and return
   470  c1d2 20f0c0                jsr ListMenuItemsInit
   471  c1d5 60                    rts
   472                          PRGStart
   473  c1d6 68                    pla ;pull the jsr return info from the stack, we're not going back!
   474  c1d7 2041c3                jsr SIDMusicOff
   475  c1da 2012c2                jsr PRGtoMem
   476  c1dd a91e                  lda #ChrGreen
   477  c1df 20d2ff                jsr SendChar 
   478  c1e2 a993                  lda #ChrClear
   479  c1e4 20d2ff                jsr SendChar 
   480                             ;load keyboard buffer with "run\n":  
   481  c1e7 a952                  lda #'r'
   482  c1e9 8d7702                sta $0277  ;kbd buff 0
   483  c1ec a955                  lda #'u'
   484  c1ee 8d7802                sta $0278 ;kbd buff 1
   485  c1f1 a94e                  lda #'n'
   486  c1f3 8d7902                sta $0279  ;kbd buff 2
   487  c1f6 a90d                  lda #ChrReturn
   488  c1f8 8d7a02                sta $027a  ;kbd buff 3
   489  c1fb a904                  lda #4
   490  c1fd 85c6                  sta $C6  ;# chars in kbd buff (4 of 10 max)
   491  c1ff 6c02a0                jmp (BasicWarmStartVect)  
   492                             
   493                          WaitForTR:  ;wait for ready status, uses acc and X
   494  c202 a205                  ldx#5 ;require 5 consecutive reads of ready to continue
   495  c204 ee4e04                inc ScreenMemStart+40*2-2 ;end of 'Time' print loc.
   496  c207 ad00de             -  lda rRegStatus+IO1Port
   497  c20a c95a                  cmp #rsReady
   498  c20c d0f4                  bne WaitForTR
   499  c20e ca                    dex
   500  c20f d0f6                  bne -
   501  c211 60                    rts
   502                             
   503                          PRGtoMem:
   504                             ;stream PRG file from TeensyROM to RAM
   505                             ;assumes TeensyROM is set up to transfer, PRG selected and waited to complete
   506                             ;rRegStrAddrHi+IO1Port is zero when inactive/complete
   507                             
   508  c212 ad02de                lda rRegStrAddrHi+IO1Port
   509  c215 d007                  bne +
   510  c217 a9ef                  lda #<MsgErrNoData;no data to read!
   511  c219 a0c4                  ldy #>MsgErrNoData
   512  c21b 4c40c2                jmp ErrOut
   513  c21e 85fc               +  sta PtrAddrHi
   514  c220 ad01de                lda rRegStrAddrLo+IO1Port   
   515  c223 85fb                  sta PtrAddrLo
   516  c225 a000                  ldy #0   ;zero offset
   517  c227 ad03de             -  lda rRegStreamData+IO1Port ;read from rRegStreamData+IO1Port increments address/checks for end
   518  c22a 91fb                  sta (PtrAddrLo), y 
   519  c22c ad02de                lda rRegStrAddrHi+IO1Port ;are we done?
   520  c22f f00e                  beq rt 
   521  c231 c8                    iny
   522  c232 d0f3                  bne -
   523  c234 e6fc                  inc PtrAddrHi
   524  c236 d0ef                  bne -
   525  c238 a901                  lda #<MsgErrOverflow ;Overflow!
   526  c23a a0c5                  ldy #>MsgErrOverflow
   527  c23c 4c40c2                jmp ErrOut
   528  c23f 60                 rt rts
   529                            
   530                          ErrOut:   
   531                             ;Error msg pointer stored in acc/y
   532  c240 48                    pha
   533  c241 98                    tya
   534  c242 48                    pha
   535  c243 a213                  ldx #19 ;row
   536  c245 a000                  ldy #0  ;col
   537  c247 18                    clc
   538  c248 20f0ff                jsr SetCursor
   539  c24b a9e6                  lda #<MsgError
   540  c24d a0c4                  ldy #>MsgError
   541  c24f 201eab                jsr PrintString   
   542  c252 68                    pla
   543  c253 a8                    tay
   544  c254 68                    pla
   545  c255 201eab                jsr PrintString
   546  c258 60                    rts
   547                          
   548                          SynchEthernetTime:
   549  c259 a903                  lda #rCtlGetTimeWAIT
   550  c25b 8d04de                sta wRegControl+IO1Port
   551  c25e 2002c2                jsr WaitForTR 
   552  c261 ad07de                lda rRegLastHourBCD+IO1Port
   553  c264 8d0bdc                sta TODHoursBCD  ;stop TOD regs incrementing
   554  c267 ad08de                lda rRegLastMinBCD+IO1Port
   555  c26a 8d0adc                sta TODMinBCD
   556  c26d ad09de                lda rRegLastSecBCD+IO1Port
   557  c270 8d09dc                sta TODSecBCD
   558  c273 a909                  lda #9
   559  c275 8d08dc                sta TODTenthSecBCD ;have to write 10ths to release latch, start incrementing
   560  c278 60                    rts
   561                             
   562                          DisplayTime:
   563  c279 a201                  ldx #1 ;row
   564  c27b a01d                  ldy #29  ;col
   565  c27d 18                    clc
   566  c27e 20f0ff                jsr SetCursor
   567  c281 a981                  lda #TimeColor
   568  c283 20d2ff                jsr SendChar
   569  c286 ad0bdc                lda TODHoursBCD ;latches time in regs (stops incrementing)
   570  c289 a8                    tay ;save for re-use
   571  c28a 291f                  and #$1f
   572  c28c d004                  bne nz   ;if hours is 0, make it 12...
   573  c28e 98                    tya
   574  c28f 0912                  ora #$12
   575  c291 a8                    tay ;re-save for re-use
   576  c292 98                 nz tya
   577  c293 2910                  and #$10
   578  c295 d005                  bne +
   579  c297 a920                  lda #ChrSpace
   580  c299 4c9ec2                jmp ++
   581  c29c a931               +  lda #'1'
   582  c29e 20d2ff             ++ jsr SendChar
   583  c2a1 98                    tya
   584  c2a2 290f                  and #$0f  ;ones of hours
   585  c2a4 20e2c2                jsr PrintHexNibble
   586  c2a7 a93a                  lda #':'
   587  c2a9 20d2ff                jsr SendChar
   588  c2ac ad0adc                lda TODMinBCD
   589  c2af 20d5c2                jsr PrintHexByte
   590  c2b2 a93a                  lda #':'
   591  c2b4 20d2ff                jsr SendChar
   592  c2b7 ad09dc                lda TODSecBCD
   593  c2ba 20d5c2                jsr PrintHexByte
   594                             ;lda #'.'
   595                             ;jsr SendChar
   596  c2bd ad08dc                lda TODTenthSecBCD ;have to read 10ths to release latch
   597                             ;jsr PrintHexNibble
   598  c2c0 98                    tya ;am/pm (pre latch release)
   599  c2c1 2980                  and #$80
   600  c2c3 d005                  bne +
   601  c2c5 a941                  lda #'a'
   602  c2c7 4cccc2                jmp ++
   603  c2ca a950               +  lda #'p'
   604  c2cc 20d2ff             ++ jsr SendChar
   605  c2cf a94d                  lda #'m'
   606  c2d1 20d2ff                jsr SendChar
   607  c2d4 60                    rts
   608                             
   609                          PrintHexByte:
   610                             ;Print byte value stored in acc in hex (2 chars)
   611  c2d5 48                    pha
   612  c2d6 6a                    ror
   613  c2d7 6a                    ror
   614  c2d8 6a                    ror
   615  c2d9 6a                    ror
   616  c2da 20e2c2                jsr PrintHexNibble
   617  c2dd 68                    pla
   618                             ;pha   ; preserve acc on return?
   619  c2de 20e2c2                jsr PrintHexNibble
   620                             ;pla
   621  c2e1 60                    rts
   622                             
   623                          PrintHexNibble:   
   624                             ;Print value stored in lower nible acc in hex
   625                             ;trashes acc
   626  c2e2 290f                  and #$0f
   627  c2e4 c90a                  cmp #$0a
   628  c2e6 1006                  bpl l 
   629  c2e8 18                    clc
   630  c2e9 6930                  adc #'0'
   631  c2eb 4cf1c2                jmp pr
   632  c2ee 18                 l  clc
   633  c2ef 6937                  adc #'a'-$0a
   634  c2f1 20d2ff             pr jsr SendChar
   635  c2f4 60                    rts
   636                          
   637                          
   638                          ; ******************************* SID stuff ******************************* 
   639                             
   640                          MIDI2SID:
   641  c2f5 2041c3                jsr SIDMusicOff
   642  c2f8 a970                  lda #<MsgBanner
   643  c2fa a0c3                  ldy #>MsgBanner
   644  c2fc 201eab                jsr PrintString 
   645                          CpySID
   646  c2ff a200                  ldx #0;
   647  c301 bd0ede             -  lda IO1Port+StartSIDRegs, x
   648  c304 9d00d4                sta SIDLoc, x
   649                             
   650                             
   651                             ;jsr PrintHexByte
   652                             ;lda #':'
   653                             ;jsr SendChar
   654                             ;txa
   655                             ;jsr PrintHexByte
   656                             ;lda #ChrSpace
   657                             ;jsr SendChar
   658                             
   659  c307 e8                    inx
   660  c308 e019                  cpx #(EndSIDRegs-StartSIDRegs)
   661  c30a d0f5                  bne -
   662                             
   663  c30c 2079c2                jsr DisplayTime
   664  c30f 20e4ff                jsr GetIn    
   665  c312 f0eb                  beq CpySID
   666                             ;any key
   667  c314 60                    rts
   668                             
   669                          ;Initialize SID interrupt
   670                          SIDMusicOn:
   671  c315 a900                  lda #$00
   672  c317 200010                jsr SIDCodeRAM ;Initialize music
   673  c31a a97f                  lda #$7f
   674  c31c 8d0ddc                sta $dc0d   ;CIA int ctl
   675  c31f ad0ddc                lda $dc0d   ;CIA int ctl
   676  c322 78                    sei
   677  c323 a901                  lda #$01
   678  c325 8d1ad0                sta $d01a  ;irq enable
   679  c328 a964                  lda #$64
   680  c32a 8d12d0                sta $d012  ;raster val
   681  c32d ad11d0                lda $d011  ;VIC ctl reg
   682  c330 297f                  AND #$7f
   683  c332 8d11d0                sta $d011  ;VIC ctl reg
   684  c335 a961                  lda #<irqSID
   685  c337 a2c3                  ldx #>irqSID
   686  c339 8d1403                sta $314   ;CINV, HW IRQ Int Lo
   687  c33c 8e1503                stx $315   ;CINV, HW IRQ Int Hi
   688  c33f 58                    cli
   689  c340 60                    rts
   690                          
   691                          SIDMusicOff:
   692  c341 78                    sei
   693  c342 a931                  lda #<IRQDefault
   694  c344 a2ea                  ldx #>IRQDefault
   695  c346 8d1403                sta $314   ;CINV, HW IRQ Int Lo
   696  c349 8e1503                stx $315   ;CINV, HW IRQ Int Hi
   697  c34c a981                  lda #$81
   698  c34e 8d0ddc                sta $dc0d  ;CIA int ctl
   699  c351 a900                  lda #0
   700  c353 8d1ad0                sta $d01a  ;irq enable
   701  c356 ee19d0                inc $d019
   702  c359 ad0ddc                lda $dc0d  ;CIA int ctl
   703  c35c 200010                jsr SIDCodeRAM
   704  c35f 58                    cli 
   705  c360 60                    rts
   706                          
   707                          irqSID:
   708  c361 ee19d0                inc $d019   ;ACK raster IRQs
   709  c364 ee20d0                inc BorderColorReg ;tweak display border
   710  c367 200310                jsr SIDCodeRAM+3 ;Play the music
   711  c36a ce20d0                dec BorderColorReg ;tweak it back
   712  c36d 4c31ea                jmp IRQDefault
   713                          
   714                          ; ******************************* Strings/Messages ******************************* 
   715                          MmmmmmmmmmessagesText:
   716                          MsgBanner:    
   717  c370 930e9c1220202020...   !tx ChrClear, ChrToLower, ChrPurple, ChrRvsOn, "            TeensyROM v0.01             ", ChrRvsOff, 0
   718                          MsgFrom:    
   719  c39e 0d9ac6524f4d2000      !tx ChrReturn, SourcesColor, "From ", 0 
   720                          MsgSelect:
   721  c3a6 9ad34f5552434553...   !tx SourcesColor, "Sources:          "
   722  c3b9 129ed550921e2f12...   !tx ChrRvsOn, OptionColor, "Up", ChrRvsOff, MenuMiscColor, "/", ChrRvsOn, OptionColor, "Dn", ChrRvsOff, MenuMiscColor, "CRSR: Page", ChrReturn
   723  c3d1 20129ec631929a20...   !tx " ", ChrRvsOn, OptionColor, "F1", ChrRvsOff, SourcesColor,  " Teensy Mem   "
   724  c3e6 20129ec632921e20...   !tx " ", ChrRvsOn, OptionColor, "F2", ChrRvsOff, MenuMiscColor, " Exit to BASIC", ChrReturn
   725  c3fc 20129ec633929a20...   !tx " ", ChrRvsOn, OptionColor, "F3", ChrRvsOff, SourcesColor,  " SD Card      "
   726  c411 20129ec634921e20...   !tx " ", ChrRvsOn, OptionColor, "F4", ChrRvsOff, MenuMiscColor, " Music on/off", ChrReturn
   727  c426 20129ec635929a20...   !tx " ", ChrRvsOn, OptionColor, "F5", ChrRvsOff, SourcesColor,  " USB Drive    "
   728  c43b 20129ec636921e20...   !tx " ", ChrRvsOn, OptionColor, "F6", ChrRvsOff, MenuMiscColor, " Ethernet Time Sync", ChrReturn
   729  c456 20129ec637929a20...   !tx " ", ChrRvsOn, OptionColor, "F7", ChrRvsOff, SourcesColor,  " USB Host     "
   730  c46b 20129ec638921e20...   !tx " ", ChrRvsOn, OptionColor, "F8", ChrRvsOff, MenuMiscColor, " Credits/Info"
   731  c47f 00                     !tx 0
   732                          MsgNoHW:
   733  c480 0d0d0e9ed445454e...   !tx ChrReturn, ChrReturn, ChrToLower, ChrYellow, "TeensyROM hardware not detected!!!", ChrReturn, 0
   734                          MsgNoItems:
   735  c4a8 0d9e20ce4f544849...   !tx ChrReturn, OptionColor, " Nothing to show!", 0
   736                          
   737                          MsgMenuSD:
   738  c4bc d3c420c34152443a...   !tx "SD Card:", 0
   739                          MsgMenuTeensy:
   740  c4c5 d445454e535920cd...   !tx "Teensy Mem:", 0
   741                          MsgMenuUSBHost:
   742  c4d1 d5d3c220c84f5354...   !tx "USB Host:", 0
   743                          MsgMenuUSBDrive:
   744  c4db d5d3c220c4524956...   !tx "USB Drive:", 0
   745                          
   746                          
   747                          MsgError:
   748  c4e6 1cc552524f523a20...   !tx ChrRed, "Error: ", 0
   749                          MsgErrNoData:
   750  c4ef ce4f20c441544120...   !tx "No Data Available", 0
   751                          MsgErrOverflow:
   752  c501 cf564552464c4f57...   !tx "Overflow", 0
   753                          ;MsgErrNoFile:
   754                          ;   !tx "No File Available", 0
   755                             
   756                          TblItemType: ;must match rtNone, rt16k, etc order!
   757  c50a ce4f4e4531364b20...   !tx "None","16k ","8Hi ","8Lo ","Prg ","Unk ","Crt ","Dir " ;4 bytes each, no term
   758                             
   759                             
   760                          EndOfAllCode = *
   761                          
